/**
 * generated by Xtext 2.12.0
 */
package edu.ustb.sei.mde.scoping;

import com.google.common.collect.Iterables;
import edu.ustb.sei.mde.scoping.AbstractSmartContractSpecificationScopeProvider;
import edu.ustb.sei.mde.smartContractSpecification.Action;
import edu.ustb.sei.mde.smartContractSpecification.ActionEnforcedTimeQuery;
import edu.ustb.sei.mde.smartContractSpecification.Asset;
import edu.ustb.sei.mde.smartContractSpecification.ComplexType;
import edu.ustb.sei.mde.smartContractSpecification.Contract;
import edu.ustb.sei.mde.smartContractSpecification.DataSlot;
import edu.ustb.sei.mde.smartContractSpecification.Field;
import edu.ustb.sei.mde.smartContractSpecification.FieldContainer;
import edu.ustb.sei.mde.smartContractSpecification.InternalParty;
import edu.ustb.sei.mde.smartContractSpecification.IteratorDeclExpression;
import edu.ustb.sei.mde.smartContractSpecification.NamedElement;
import edu.ustb.sei.mde.smartContractSpecification.Party;
import edu.ustb.sei.mde.smartContractSpecification.QuantifierExpression;
import edu.ustb.sei.mde.smartContractSpecification.SlotRef;
import edu.ustb.sei.mde.smartContractSpecification.SmartContractSpecificationPackage;
import edu.ustb.sei.mde.smartContractSpecification.Term;
import edu.ustb.sei.mde.smartContractSpecification.ThisExpression;
import edu.ustb.sei.mde.smartContractSpecification.TransferOperation;
import edu.ustb.sei.mde.smartContractSpecification.Type;
import edu.ustb.sei.mde.smartContractSpecification.TypeLib;
import edu.ustb.sei.mde.smartContractSpecification.enumType;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SmartContractSpecificationScopeProvider extends AbstractSmartContractSpecificationScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    EClassifier _eType = reference.getEType();
    boolean _tripleEquals = (_eType == SmartContractSpecificationPackage.Literals.ACTION);
    if (_tripleEquals) {
      IScope _xblockexpression = null;
      {
        Party _xifexpression_1 = null;
        if ((reference == SmartContractSpecificationPackage.Literals.TERM__ACTION)) {
          _xifexpression_1 = ((Term) context).getParty();
        } else {
          Party _xifexpression_2 = null;
          if ((reference == SmartContractSpecificationPackage.Literals.ACTION_ENFORCED_TIME_QUERY__ACTION)) {
            _xifexpression_2 = ((ActionEnforcedTimeQuery) context).getParty();
          } else {
            _xifexpression_2 = null;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        final Party party = _xifexpression_1;
        IScope _xifexpression_3 = null;
        if (((party == null) || party.eIsProxy())) {
          _xifexpression_3 = super.getScope(context, reference);
        } else {
          SimpleScope _xblockexpression_1 = null;
          {
            EList<Party> _parties = this.getContract(context).getParties();
            ArrayList<Action> _arrayList = new ArrayList<Action>();
            final Function2<ArrayList<Action>, Party, ArrayList<Action>> _function = (ArrayList<Action> r, Party t) -> {
              ArrayList<Action> _xblockexpression_2 = null;
              {
                r.addAll(t.getActions());
                _xblockexpression_2 = r;
              }
              return _xblockexpression_2;
            };
            final List<Action> list = IterableExtensions.<Party, ArrayList<Action>>fold(_parties, _arrayList, _function);
            final Function1<Action, Boolean> _function_1 = (Action a) -> {
              EObject _eContainer = a.eContainer();
              return Boolean.valueOf((_eContainer == party));
            };
            ArrayList<IEObjectDescription> _arrayList_1 = new ArrayList<IEObjectDescription>();
            final Function2<ArrayList<IEObjectDescription>, Action, ArrayList<IEObjectDescription>> _function_2 = (ArrayList<IEObjectDescription> r, Action t) -> {
              ArrayList<IEObjectDescription> _xblockexpression_2 = null;
              {
                r.add(EObjectDescription.create(t.getName(), t));
                _xblockexpression_2 = r;
              }
              return _xblockexpression_2;
            };
            final List<IEObjectDescription> desc = IterableExtensions.<Action, ArrayList<IEObjectDescription>>fold(IterableExtensions.<Action>filter(list, _function_1), _arrayList_1, _function_2);
            _xblockexpression_1 = new SimpleScope(SimpleScope.NULLSCOPE, desc);
          }
          _xifexpression_3 = _xblockexpression_1;
        }
        _xblockexpression = _xifexpression_3;
      }
      _xifexpression = _xblockexpression;
    } else {
      IScope _xifexpression_1 = null;
      if ((reference == SmartContractSpecificationPackage.Literals.TYPED_ELEMENT__TYPE)) {
        SimpleScope _xblockexpression_1 = null;
        {
          EList<Type> _types = this.getContract(context).getTypes();
          final List<Type> list = new ArrayList<Type>(_types);
          list.addAll(this.getContract(context).getParties());
          list.addAll(this.getContract(context).getEnumTypes());
          list.addAll(this.getContract(context).getAssets());
          final ResourceSet resSet = context.eResource().getResourceSet();
          URI uri = URI.createPlatformPluginURI("edu.ustb.sei.mde.smartcontract/model/TypeLib.xmi", false);
          final Resource typeRes = resSet.getResource(uri, true);
          if ((typeRes != null)) {
            EObject _get = typeRes.getContents().get(0);
            list.addAll(((TypeLib) _get).getTypes());
          }
          ArrayList<IEObjectDescription> _arrayList = new ArrayList<IEObjectDescription>();
          final Function2<ArrayList<IEObjectDescription>, Type, ArrayList<IEObjectDescription>> _function = (ArrayList<IEObjectDescription> r, Type t) -> {
            ArrayList<IEObjectDescription> _xblockexpression_2 = null;
            {
              r.add(EObjectDescription.create(t.getName(), t));
              _xblockexpression_2 = r;
            }
            return _xblockexpression_2;
          };
          final List<IEObjectDescription> desc = IterableExtensions.<Type, ArrayList<IEObjectDescription>>fold(list, _arrayList, _function);
          _xblockexpression_1 = new SimpleScope(SimpleScope.NULLSCOPE, desc);
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        IScope _xifexpression_2 = null;
        if ((reference == SmartContractSpecificationPackage.Literals.SLOT_REF__SLOT)) {
          SimpleScope _xifexpression_3 = null;
          EObject _eContainer = context.eContainer();
          if ((_eContainer instanceof SlotRef)) {
            SimpleScope _xblockexpression_2 = null;
            {
              EObject _eContainer_1 = context.eContainer();
              final DataSlot slot = ((SlotRef) _eContainer_1).getSlot();
              List<? extends NamedElement> _xifexpression_4 = null;
              if ((slot instanceof InternalParty)) {
                _xifexpression_4 = ((InternalParty) slot).getFields();
              } else {
                List<? extends NamedElement> _xifexpression_5 = null;
                if ((slot instanceof Field)) {
                  List<? extends NamedElement> _xifexpression_6 = null;
                  Type _type = ((Field) slot).getType();
                  if ((_type instanceof ComplexType)) {
                    Type _type_1 = ((Field) slot).getType();
                    _xifexpression_6 = ((ComplexType) _type_1).getFields();
                  } else {
                    List<? extends NamedElement> _xifexpression_7 = null;
                    Type _type_2 = ((Field) slot).getType();
                    if ((_type_2 instanceof Asset)) {
                      Type _type_3 = ((Field) slot).getType();
                      _xifexpression_7 = ((Asset) _type_3).getFields();
                    } else {
                      List<? extends NamedElement> _xifexpression_8 = null;
                      Type _type_4 = ((Field) slot).getType();
                      if ((_type_4 instanceof InternalParty)) {
                        Type _type_5 = ((Field) slot).getType();
                        _xifexpression_8 = ((InternalParty) _type_5).getFields();
                      } else {
                        _xifexpression_8 = Collections.<NamedElement>emptyList();
                      }
                      _xifexpression_7 = _xifexpression_8;
                    }
                    _xifexpression_6 = _xifexpression_7;
                  }
                  _xifexpression_5 = _xifexpression_6;
                } else {
                  List<? extends NamedElement> _xifexpression_9 = null;
                  if ((slot instanceof IteratorDeclExpression)) {
                    List<? extends NamedElement> _xblockexpression_3 = null;
                    {
                      final FieldContainer type = ((IteratorDeclExpression) slot).getType();
                      List<? extends NamedElement> _xifexpression_10 = null;
                      if ((type == null)) {
                        _xifexpression_10 = Collections.<NamedElement>emptyList();
                      } else {
                        List<? extends NamedElement> _xifexpression_11 = null;
                        if ((type instanceof ComplexType)) {
                          _xifexpression_11 = ((ComplexType) type).getFields();
                        } else {
                          List<? extends NamedElement> _xifexpression_12 = null;
                          if ((type instanceof Asset)) {
                            _xifexpression_12 = ((Asset) type).getFields();
                          } else {
                            List<? extends NamedElement> _xifexpression_13 = null;
                            if ((type instanceof InternalParty)) {
                              _xifexpression_13 = ((InternalParty) type).getFields();
                            } else {
                              _xifexpression_13 = Collections.<NamedElement>emptyList();
                            }
                            _xifexpression_12 = _xifexpression_13;
                          }
                          _xifexpression_11 = _xifexpression_12;
                        }
                        _xifexpression_10 = _xifexpression_11;
                      }
                      _xblockexpression_3 = _xifexpression_10;
                    }
                    _xifexpression_9 = _xblockexpression_3;
                  } else {
                    List<? extends NamedElement> _xifexpression_10 = null;
                    if ((slot instanceof enumType)) {
                      _xifexpression_10 = ((enumType) slot).getSelections();
                    } else {
                      List<? extends NamedElement> _xifexpression_11 = null;
                      if (((slot == null) && (context.eContainer() instanceof ThisExpression))) {
                        final Function1<Party, Boolean> _function = (Party a) -> {
                          return Boolean.valueOf(((a == this.getTerm(context).getParty()) && (a instanceof InternalParty)));
                        };
                        Iterable<Party> _filter = IterableExtensions.<Party>filter(this.getContract(context).getParties(), _function);
                        ArrayList<Field> _arrayList = new ArrayList<Field>();
                        final Function2<ArrayList<Field>, Party, ArrayList<Field>> _function_1 = (ArrayList<Field> r, Party t) -> {
                          ArrayList<Field> _xblockexpression_4 = null;
                          {
                            EList<Field> _fields = ((InternalParty) t).getFields();
                            Iterables.<Field>addAll(r, _fields);
                            _xblockexpression_4 = r;
                          }
                          return _xblockexpression_4;
                        };
                        _xifexpression_11 = IterableExtensions.<Party, ArrayList<Field>>fold(_filter, _arrayList, _function_1);
                      } else {
                        _xifexpression_11 = Collections.<NamedElement>emptyList();
                      }
                      _xifexpression_10 = _xifexpression_11;
                    }
                    _xifexpression_9 = _xifexpression_10;
                  }
                  _xifexpression_5 = _xifexpression_9;
                }
                _xifexpression_4 = _xifexpression_5;
              }
              final List<? extends NamedElement> list = _xifexpression_4;
              ArrayList<IEObjectDescription> _arrayList_1 = new ArrayList<IEObjectDescription>();
              final Function2<ArrayList<IEObjectDescription>, NamedElement, ArrayList<IEObjectDescription>> _function_2 = (ArrayList<IEObjectDescription> r, NamedElement t) -> {
                ArrayList<IEObjectDescription> _xblockexpression_4 = null;
                {
                  r.add(EObjectDescription.create(t.getName(), t));
                  _xblockexpression_4 = r;
                }
                return _xblockexpression_4;
              };
              final List<IEObjectDescription> desc = IterableExtensions.fold(list, _arrayList_1, _function_2);
              _xblockexpression_2 = new SimpleScope(SimpleScope.NULLSCOPE, desc);
            }
            _xifexpression_3 = _xblockexpression_2;
          } else {
            SimpleScope _xblockexpression_3 = null;
            {
              final List<IEObjectDescription> desc = new ArrayList<IEObjectDescription>();
              final Contract contract = this.getContract(context);
              final Function2<List<IEObjectDescription>, Field, List<IEObjectDescription>> _function = (List<IEObjectDescription> r, Field t) -> {
                List<IEObjectDescription> _xblockexpression_4 = null;
                {
                  r.add(EObjectDescription.create(t.getName(), t));
                  _xblockexpression_4 = r;
                }
                return _xblockexpression_4;
              };
              IterableExtensions.<Field, List<IEObjectDescription>>fold(contract.getFields(), desc, _function);
              final Function1<Party, Boolean> _function_1 = (Party p) -> {
                return Boolean.valueOf((p instanceof InternalParty));
              };
              final Function2<List<IEObjectDescription>, Party, List<IEObjectDescription>> _function_2 = (List<IEObjectDescription> r, Party t) -> {
                List<IEObjectDescription> _xblockexpression_4 = null;
                {
                  r.add(EObjectDescription.create(t.getName(), t));
                  _xblockexpression_4 = r;
                }
                return _xblockexpression_4;
              };
              IterableExtensions.<Party, List<IEObjectDescription>>fold(IterableExtensions.<Party>filter(contract.getParties(), _function_1), desc, _function_2);
              final Term term = this.getTerm(context);
              if ((term != null)) {
                final Function2<List<IEObjectDescription>, Field, List<IEObjectDescription>> _function_3 = (List<IEObjectDescription> r, Field t) -> {
                  List<IEObjectDescription> _xblockexpression_4 = null;
                  {
                    r.add(EObjectDescription.create(t.getName(), t));
                    _xblockexpression_4 = r;
                  }
                  return _xblockexpression_4;
                };
                IterableExtensions.<Field, List<IEObjectDescription>>fold(term.getAction().getParameters(), desc, _function_3);
              }
              if ((term != null)) {
                final Function2<List<IEObjectDescription>, TransferOperation, List<IEObjectDescription>> _function_4 = (List<IEObjectDescription> r, TransferOperation t) -> {
                  List<IEObjectDescription> _xblockexpression_4 = null;
                  {
                    String _name = t.getMoney().getName();
                    boolean _tripleNotEquals = (_name != null);
                    if (_tripleNotEquals) {
                      r.add(EObjectDescription.create(t.getMoney().getName(), t.getMoney()));
                    }
                    _xblockexpression_4 = r;
                  }
                  return _xblockexpression_4;
                };
                IterableExtensions.<TransferOperation, List<IEObjectDescription>>fold(term.getTransferOperations(), desc, _function_4);
              }
              if ((term != null)) {
                final Function2<List<IEObjectDescription>, TransferOperation, List<IEObjectDescription>> _function_5 = (List<IEObjectDescription> r, TransferOperation t) -> {
                  List<IEObjectDescription> _xblockexpression_4 = null;
                  {
                    String _name = t.getMoney().getName();
                    boolean _tripleNotEquals = (_name != null);
                    if (_tripleNotEquals) {
                      r.add(EObjectDescription.create(t.getMoney().getName(), t.getMoney()));
                    }
                    _xblockexpression_4 = r;
                  }
                  return _xblockexpression_4;
                };
                IterableExtensions.<TransferOperation, List<IEObjectDescription>>fold(term.getBreachOperations(), desc, _function_5);
              }
              final List<IteratorDeclExpression> iterators = this.collectIterators(context);
              if ((iterators != null)) {
                final Function2<List<IEObjectDescription>, IteratorDeclExpression, List<IEObjectDescription>> _function_6 = (List<IEObjectDescription> r, IteratorDeclExpression i) -> {
                  List<IEObjectDescription> _xblockexpression_4 = null;
                  {
                    r.add(EObjectDescription.create(i.getName(), i));
                    _xblockexpression_4 = r;
                  }
                  return _xblockexpression_4;
                };
                IterableExtensions.<IteratorDeclExpression, List<IEObjectDescription>>fold(iterators, desc, _function_6);
              }
              _xblockexpression_3 = new SimpleScope(SimpleScope.NULLSCOPE, desc);
            }
            _xifexpression_3 = _xblockexpression_3;
          }
          _xifexpression_2 = _xifexpression_3;
        } else {
          _xifexpression_2 = super.getScope(context, reference);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Term getTerm(final EObject o) {
    Term _xifexpression = null;
    if ((o == null)) {
      _xifexpression = null;
    } else {
      Term _xifexpression_1 = null;
      if ((o instanceof Term)) {
        _xifexpression_1 = ((Term) o);
      } else {
        _xifexpression_1 = this.getTerm(o.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public List<IteratorDeclExpression> collectIterators(final EObject context) {
    List<IteratorDeclExpression> _xblockexpression = null;
    {
      if ((context == null)) {
        return null;
      }
      IteratorDeclExpression _xifexpression = null;
      if ((context instanceof QuantifierExpression)) {
        _xifexpression = ((QuantifierExpression)context).getIterator();
      } else {
        _xifexpression = null;
      }
      final IteratorDeclExpression current = _xifexpression;
      final List<IteratorDeclExpression> parents = this.collectIterators(context.eContainer());
      List<IteratorDeclExpression> _xifexpression_1 = null;
      if (((current != null) && (parents != null))) {
        List<IteratorDeclExpression> _xblockexpression_1 = null;
        {
          parents.add(current);
          _xblockexpression_1 = parents;
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        List<IteratorDeclExpression> _xifexpression_2 = null;
        if ((current == null)) {
          _xifexpression_2 = parents;
        } else {
          ArrayList<IteratorDeclExpression> _xifexpression_3 = null;
          if ((parents == null)) {
            ArrayList<IteratorDeclExpression> _xblockexpression_2 = null;
            {
              final ArrayList<IteratorDeclExpression> col = new ArrayList<IteratorDeclExpression>();
              col.add(current);
              _xblockexpression_2 = col;
            }
            _xifexpression_3 = _xblockexpression_2;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xblockexpression = _xifexpression_1;
    }
    return _xblockexpression;
  }
  
  public Contract getContract(final EObject o) {
    Contract _xifexpression = null;
    if ((o == null)) {
      _xifexpression = null;
    } else {
      Contract _xifexpression_1 = null;
      if ((o instanceof Contract)) {
        _xifexpression_1 = ((Contract)o);
      } else {
        _xifexpression_1 = this.getContract(o.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
