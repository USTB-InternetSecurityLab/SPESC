package edu.ustb.sei.mde.generator;

import edu.ustb.sei.mde.generator.PartyGenerator;
import edu.ustb.sei.mde.smartContractSpecification.Action;
import edu.ustb.sei.mde.smartContractSpecification.Field;
import edu.ustb.sei.mde.smartContractSpecification.GroupParty;
import edu.ustb.sei.mde.smartContractSpecification.InternalParty;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class GroupPartyGenerator {
  public static String parseParty(final GroupParty p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("pragma solidity >=0.4.0 <0.6.0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("contract ");
    String _name = p.getName();
    _builder.append(_name);
    _builder.append("T{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("struct ");
    String _name_1 = p.getName();
    _builder.append(_name_1, "\t");
    _builder.append("type{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("address _");
    String _name_2 = p.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("address;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _Attribute = PartyGenerator.Attribute(p);
    _builder.append(_Attribute, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _DefaultAttribute = PartyGenerator.DefaultAttribute(p);
    _builder.append(_DefaultAttribute, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _RoleAttribute = GroupPartyGenerator.RoleAttribute(p);
    _builder.append(_RoleAttribute, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _BasicOperation = GroupPartyGenerator.BasicOperation(p);
    _builder.append(_BasicOperation, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _GetterAndSetter = GroupPartyGenerator.GetterAndSetter(p);
    _builder.append(_GetterAndSetter, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _ActionsCount = GroupPartyGenerator.ActionsCount(p);
    _builder.append(_ActionsCount, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static CharSequence RoleAttribute(final GroupParty p) {
    String result = "";
    String _result = result;
    result = (_result + "uint _max;//time max\n");
    String _result_1 = result;
    result = (_result_1 + "uint _sum;//total member of this party\n");
    EList<Action> _actions = p.getActions();
    for (final Action f : _actions) {
      String _result_2 = result;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("uint _");
      String _name = f.getName();
      _builder.append(_name);
      _builder.append("DoneNum;");
      _builder.newLineIfNotEmpty();
      _builder.append("uint[] _");
      String _name_1 = f.getName();
      _builder.append(_name_1);
      _builder.append("Time;");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      result = (_result_2 + _builder);
    }
    String _result_3 = result;
    StringConcatenation _builder_1 = new StringConcatenation();
    String _name_2 = p.getName();
    _builder_1.append(_name_2);
    _builder_1.append("type _Empty;//used to initialize");
    _builder_1.newLineIfNotEmpty();
    String _name_3 = p.getName();
    _builder_1.append(_name_3);
    _builder_1.append("type[] _");
    String _name_4 = p.getName();
    _builder_1.append(_name_4);
    _builder_1.append("Entity;");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("mapping(address=>uint) _userlist;");
    _builder_1.newLine();
    _builder_1.newLine();
    result = (_result_3 + _builder_1);
    return result;
  }
  
  public static CharSequence BasicOperation(final GroupParty p) {
    String result = "";
    String _result = result;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = p.getName();
    _builder.append(_name);
    _builder.append("T(){");
    _builder.newLineIfNotEmpty();
    {
      EList<Action> _actions = p.getActions();
      for(final Action f : _actions) {
        _builder.append("\t");
        _builder.append("_");
        String _name_1 = f.getName();
        _builder.append(_name_1, "\t");
        _builder.append("DoneNum = 0;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("_");
    String _name_2 = p.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Entity.push(_Empty);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("_max = now*1000;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function getSum() public returns(uint c){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return _sum;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function add(address a) public {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("_");
    String _name_3 = p.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Entity.push(_Empty);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("_userlist[a] = _sum;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("_sum ++;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function remove(address a) public {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("uint num = _userlist[a];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("_");
    String _name_4 = p.getName();
    _builder.append(_name_4, "\t");
    _builder.append("Entity[num] = _");
    String _name_5 = p.getName();
    _builder.append(_name_5, "\t");
    _builder.append("Entity[_sum-1];");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("_userlist[_");
    String _name_6 = p.getName();
    _builder.append(_name_6, "\t");
    _builder.append("Entity[num]._");
    String _name_7 = p.getName();
    _builder.append(_name_7, "\t");
    _builder.append("address] = num;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("delete(_");
    String _name_8 = p.getName();
    _builder.append(_name_8, "\t");
    _builder.append("Entity[num]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("delete(_userlist[a]);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("_sum --;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function getList() public returns (address[]){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("address[] a;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(uint i = 0; i < _sum; i ++)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a[i] = _");
    String _name_9 = p.getName();
    _builder.append(_name_9, "        ");
    _builder.append("Entity[i]._");
    String _name_10 = p.getName();
    _builder.append(_name_10, "        ");
    _builder.append("address;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return a;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function contains(address a) public returns (bool b){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return _userlist[a] != 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    result = (_result + _builder);
    return result;
  }
  
  public static CharSequence GetterAndSetter(final GroupParty p) {
    String result = "";
    if ((p instanceof InternalParty)) {
      EList<Field> _fields = p.getFields();
      for (final Field f : _fields) {
        String _result = result;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("function get");
        String _name = f.getName();
        _builder.append(_name);
        _builder.append("(address a) returns(");
        CharSequence _typeName = PartyGenerator.getTypeName(f.getType());
        _builder.append(_typeName);
        _builder.append(" _result){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("uint num = _userlist[a];");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return _");
        String _name_1 = p.getName();
        _builder.append(_name_1, "\t");
        _builder.append("Entity[num].");
        String _name_2 = f.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("function set");
        String _name_3 = f.getName();
        _builder.append(_name_3);
        _builder.append("(address a, ");
        CharSequence _typeName_1 = PartyGenerator.getTypeName(f.getType());
        _builder.append(_typeName_1);
        _builder.append(" b){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("uint num = _userlist[a];");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("_");
        String _name_4 = p.getName();
        _builder.append(_name_4, "\t");
        _builder.append("Entity[num].");
        String _name_5 = f.getName();
        _builder.append(_name_5, "\t");
        _builder.append(" = b;");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        result = (_result + _builder);
      }
    }
    return result;
  }
  
  public static CharSequence ActionsCount(final GroupParty p) {
    String result = "";
    EList<Action> _actions = p.getActions();
    for (final Action f : _actions) {
      boolean _isUsed = f.isUsed();
      if (_isUsed) {
        String _result = result;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("function ");
        String _name = f.getName();
        _builder.append(_name);
        _builder.append("Done(address a){");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("uint num = _userlist[a];");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("_");
        String _name_1 = p.getName();
        _builder.append(_name_1, "\t");
        _builder.append("Entity[num]._");
        String _name_2 = f.getName();
        _builder.append(_name_2, "\t");
        _builder.append("Time = now;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("_");
        String _name_3 = p.getName();
        _builder.append(_name_3, "\t");
        _builder.append("Entity[num]._is");
        String _name_4 = f.getName();
        _builder.append(_name_4, "\t");
        _builder.append("Done = true;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("_");
        String _name_5 = f.getName();
        _builder.append(_name_5, "\t");
        _builder.append("Time.push(_");
        String _name_6 = p.getName();
        _builder.append(_name_6, "\t");
        _builder.append("Entity[num]._");
        String _name_7 = f.getName();
        _builder.append(_name_7, "\t");
        _builder.append("Time);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("_");
        String _name_8 = f.getName();
        _builder.append(_name_8, "\t");
        _builder.append("DoneNum ++;");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("function ");
        String _name_9 = f.getName();
        _builder.append(_name_9);
        _builder.append("Time(address a) returns (uint result){");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("uint num = _userlist[a];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if(_");
        String _name_10 = p.getName();
        _builder.append(_name_10, "    ");
        _builder.append("Entity[num]._is");
        String _name_11 = f.getName();
        _builder.append(_name_11, "    ");
        _builder.append("Done){");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("return _");
        String _name_12 = p.getName();
        _builder.append(_name_12, "        ");
        _builder.append("Entity[num]._");
        String _name_13 = f.getName();
        _builder.append(_name_13, "        ");
        _builder.append("Time;");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return _max;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("function ");
        String _name_14 = f.getName();
        _builder.append(_name_14);
        _builder.append("AllTime() returns (uint result){");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("if(_");
        String _name_15 = f.getName();
        _builder.append(_name_15, "    ");
        _builder.append("DoneNum == _max-1){");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("return _");
        String _name_16 = f.getName();
        _builder.append(_name_16, "        ");
        _builder.append("Time[_");
        String _name_17 = f.getName();
        _builder.append(_name_17, "        ");
        _builder.append("DoneNum-1];");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return _max;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("function ");
        String _name_18 = f.getName();
        _builder.append(_name_18);
        _builder.append("SomeTime() returns (uint result){");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("if(_");
        String _name_19 = f.getName();
        _builder.append(_name_19, "    ");
        _builder.append("DoneNum >= 1){");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("return _");
        String _name_20 = f.getName();
        _builder.append(_name_20, "        ");
        _builder.append("Time[0];");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return _max;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        result = (_result + _builder);
      }
    }
    return result;
  }
}
