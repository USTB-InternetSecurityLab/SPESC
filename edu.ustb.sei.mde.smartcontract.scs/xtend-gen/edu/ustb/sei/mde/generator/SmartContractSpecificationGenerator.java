/**
 * generated by Xtext 2.12.0
 */
package edu.ustb.sei.mde.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import edu.ustb.sei.mde.generator.GenerateAsset;
import edu.ustb.sei.mde.generator.PartyGenerator;
import edu.ustb.sei.mde.smartContractSpecification.Action;
import edu.ustb.sei.mde.smartContractSpecification.AdditiveExpression;
import edu.ustb.sei.mde.smartContractSpecification.AdditiveOperator;
import edu.ustb.sei.mde.smartContractSpecification.Asset;
import edu.ustb.sei.mde.smartContractSpecification.ComplexType;
import edu.ustb.sei.mde.smartContractSpecification.Contract;
import edu.ustb.sei.mde.smartContractSpecification.Deposit;
import edu.ustb.sei.mde.smartContractSpecification.Expression;
import edu.ustb.sei.mde.smartContractSpecification.Field;
import edu.ustb.sei.mde.smartContractSpecification.IntegerConstant;
import edu.ustb.sei.mde.smartContractSpecification.MultiplicativeExpression;
import edu.ustb.sei.mde.smartContractSpecification.MultiplicativeOperator;
import edu.ustb.sei.mde.smartContractSpecification.Party;
import edu.ustb.sei.mde.smartContractSpecification.PrimitiveType;
import edu.ustb.sei.mde.smartContractSpecification.RelationalExpression;
import edu.ustb.sei.mde.smartContractSpecification.SlotRef;
import edu.ustb.sei.mde.smartContractSpecification.StringConstant;
import edu.ustb.sei.mde.smartContractSpecification.Term;
import edu.ustb.sei.mde.smartContractSpecification.Transfer;
import edu.ustb.sei.mde.smartContractSpecification.TransferOperation;
import edu.ustb.sei.mde.smartContractSpecification.Type;
import edu.ustb.sei.mde.smartContractSpecification.Withdraw;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmartContractSpecificationGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Contract> _filter = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    for (final Contract e : _filter) {
      {
        String _name = e.getName();
        String _plus = (_name + "/");
        String _name_1 = e.getName();
        String _plus_1 = (_plus + _name_1);
        String _plus_2 = (_plus_1 + ".sol");
        fsa.generateFile(_plus_2, 
          this.compileContract(e));
        EList<Party> _parties = e.getParties();
        for (final Party f : _parties) {
          String _name_2 = e.getName();
          String _plus_3 = (_name_2 + "/");
          String _name_3 = f.getName();
          String _plus_4 = (_plus_3 + _name_3);
          String _plus_5 = (_plus_4 + "T.sol");
          fsa.generateFile(_plus_5, 
            PartyGenerator.parseParty(f));
        }
        EList<Asset> _assets = e.getAssets();
        for (final Asset f_1 : _assets) {
          String _name_4 = e.getName();
          String _plus_6 = (_name_4 + "/");
          String _name_5 = f_1.getName();
          String _plus_7 = (_plus_6 + _name_5);
          String _plus_8 = (_plus_7 + "A.sol");
          fsa.generateFile(_plus_8, 
            GenerateAsset.parseAsset(f_1));
        }
      }
    }
  }
  
  public CharSequence chain(final Contract e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'{\"contract\":{\"parties\":{");
    {
      EList<Party> _parties = e.getParties();
      for(final Party f : _parties) {
        CharSequence _chain = this.chain(f);
        _builder.append(_chain);
        _builder.append(",");
      }
    }
    String result = _builder.toString();
    int _length = result.length();
    int _minus = (_length - 1);
    result = result.substring(0, _minus);
    String _result = result;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("},\"terms\":{");
    {
      EList<Term> _terms = e.getTerms();
      for(final Term f_1 : _terms) {
        CharSequence _chain_1 = this.chain(f_1);
        _builder_1.append(_chain_1);
        _builder_1.append(",");
      }
    }
    result = (_result + _builder_1);
    int _length_1 = result.length();
    int _minus_1 = (_length_1 - 1);
    result = result.substring(0, _minus_1);
    String _result_1 = result;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("}}}\' ");
    result = (_result_1 + _builder_2);
    return result;
  }
  
  public CharSequence chain(final Party e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"p\":\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\"");
    return _builder;
  }
  
  public CharSequence chain(final Term e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\":{\"condition\":{\"executor\":\"");
    String _name_1 = e.getParty().getName();
    _builder.append(_name_1);
    _builder.append("\"");
    String result = _builder.toString();
    Expression _condition = e.getCondition();
    boolean _tripleNotEquals = (_condition != null);
    if (_tripleNotEquals) {
      String _result = result;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(",");
      CharSequence _chain = this.chain(e.getCondition(), 1);
      _builder_1.append(_chain);
      result = (_result + _builder_1);
    }
    String _result_1 = result;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("},\"acts\":{");
    {
      EList<TransferOperation> _transferOperations = e.getTransferOperations();
      for(final TransferOperation f : _transferOperations) {
        CharSequence _chain_1 = this.chain(f);
        _builder_2.append(_chain_1);
        _builder_2.append(",");
      }
    }
    result = (_result_1 + _builder_2);
    int _length = result.length();
    int _minus = (_length - 1);
    result = result.substring(0, _minus);
    Expression _postCondition = e.getPostCondition();
    boolean _tripleNotEquals_1 = (_postCondition != null);
    if (_tripleNotEquals_1) {
      String _result_2 = result;
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("},\"postcondition\":{");
      CharSequence _chain_2 = this.chain(e.getPostCondition(), 1);
      _builder_3.append(_chain_2);
      result = (_result_2 + _builder_3);
    }
    String _result_3 = result;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("}}");
    result = (_result_3 + _builder_4);
    return result;
  }
  
  public CharSequence chain(final Expression e, final int type) {
    String result = "";
    if ((type == 1)) {
      if ((e instanceof RelationalExpression)) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        CharSequence _chain = this.chain(((RelationalExpression)e).getLeft(), 1);
        _builder.append(_chain);
        _builder.append("\":\"");
        CharSequence _chain_1 = this.chain(((RelationalExpression)e).getRight(), 1);
        _builder.append(_chain_1);
        _builder.append("\"");
        result = _builder.toString();
      }
      if ((e instanceof SlotRef)) {
        result = ((SlotRef)e).getSlot().getName();
      }
      if ((e instanceof StringConstant)) {
        result = ((StringConstant)e).getValue();
      }
    } else {
      if ((e instanceof RelationalExpression)) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"value\":\"");
        CharSequence _chain_2 = this.chain(((RelationalExpression)e).getRight(), 4);
        _builder_1.append(_chain_2);
        result = _builder_1.toString();
      }
      if ((e instanceof SlotRef)) {
        if ((type == 3)) {
        } else {
          if ((type == 0)) {
            StringConcatenation _builder_2 = new StringConcatenation();
            String _name = ((SlotRef)e).getSlot().getName();
            _builder_2.append(_name);
            result = _builder_2.toString();
          } else {
            StringConcatenation _builder_3 = new StringConcatenation();
            String _name_1 = ((SlotRef)e).getSlot().getName();
            _builder_3.append(_name_1);
            _builder_3.append("\"");
            result = _builder_3.toString();
          }
        }
      }
      if ((e instanceof AdditiveExpression)) {
        StringConcatenation _builder_4 = new StringConcatenation();
        CharSequence _chain_3 = this.chain(((AdditiveExpression)e).getLeft(), 4);
        _builder_4.append(_chain_3);
        _builder_4.append(",\"ops\":{\"op\":{\"opname\":\"");
        AdditiveOperator _operator = ((AdditiveExpression)e).getOperator();
        _builder_4.append(_operator);
        _builder_4.append("\",\"opnumber\":");
        CharSequence _chain_4 = this.chain(((AdditiveExpression)e).getRight(), 4);
        _builder_4.append(_chain_4);
        _builder_4.append("}}");
        result = _builder_4.toString();
      }
      if ((e instanceof MultiplicativeExpression)) {
        StringConcatenation _builder_5 = new StringConcatenation();
        CharSequence _chain_5 = this.chain(((MultiplicativeExpression)e).getLeft(), 4);
        _builder_5.append(_chain_5);
        _builder_5.append(",\"ops\":{\"op\":{\"opname\":\"");
        MultiplicativeOperator _operator_1 = ((MultiplicativeExpression)e).getOperator();
        _builder_5.append(_operator_1);
        _builder_5.append("\",\"opnumber\":");
        CharSequence _chain_6 = this.chain(((MultiplicativeExpression)e).getRight(), 4);
        _builder_5.append(_chain_6);
        _builder_5.append("}}");
        result = _builder_5.toString();
      }
      if ((e instanceof IntegerConstant)) {
        StringConcatenation _builder_6 = new StringConcatenation();
        int _value = ((IntegerConstant)e).getValue();
        _builder_6.append(_value);
        result = _builder_6.toString();
      }
    }
    return result;
  }
  
  public CharSequence chain(final TransferOperation e) {
    String result = "";
    if ((e instanceof Deposit)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"act\":{\"name\":\"deposit\",");
      CharSequence _chain = this.chain(((Deposit)e).getMoney().getCondition(), 0);
      _builder.append(_chain);
      _builder.append("}");
      result = _builder.toString();
    }
    if ((e instanceof Withdraw)) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"act\":{\"name\":\"withdraw\",");
      CharSequence _chain_1 = this.chain(((Withdraw)e).getMoney().getCondition(), 0);
      _builder_1.append(_chain_1);
      _builder_1.append("}");
      result = _builder_1.toString();
    }
    return result;
  }
  
  public CharSequence compileContract(final Contract e) {
    String a = "";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("pragma solidity >=0.4.0 <0.6.0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Party> _parties = e.getParties();
      for(final Party f : _parties) {
        _builder.append("import \"./");
        String _name = f.getName();
        _builder.append(_name);
        _builder.append("T.sol\";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Asset> _assets = e.getAssets();
      for(final Asset f_1 : _assets) {
        _builder.append("import \"./");
        String _name_1 = f_1.getName();
        _builder.append(_name_1);
        _builder.append("A.sol\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("contract ");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Party> _parties_1 = e.getParties();
      for(final Party f_2 : _parties_1) {
        _builder.append("\t");
        String _name_3 = f_2.getName();
        _builder.append(_name_3, "\t");
        _builder.append("T ");
        String _name_4 = f_2.getName();
        _builder.append(_name_4, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Field> _fields = e.getFields();
      for(final Field f_3 : _fields) {
        _builder.append("\t");
        CharSequence _compileFields = this.compileFields(f_3);
        _builder.append(_compileFields, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("uint start;");
    _builder.newLine();
    {
      EList<Type> _types = e.getTypes();
      for(final Type f_4 : _types) {
        _builder.append("\t");
        CharSequence _compileTypes = this.compileTypes(((ComplexType) f_4));
        _builder.append(_compileTypes, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compileConstructor = this.compileConstructor(e);
    _builder.append(_compileConstructor, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compileModifier = this.compileModifier(e);
    _builder.append(_compileModifier, "\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Term> _terms = e.getTerms();
      for(final Term f_5 : _terms) {
        _builder.append("\t");
        CharSequence _compileTerms = this.compileTerms(f_5);
        _builder.append(_compileTerms, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    a = _builder.toString();
    return a;
  }
  
  public CharSequence compileFields(final Field e) {
    String a = "";
    Type type = e.getType();
    if ((type instanceof PrimitiveType)) {
      String _instanceType = ((PrimitiveType)type).getInstanceType();
      String _plus = (_instanceType + " ");
      String _name = e.getName();
      String _plus_1 = (_plus + _name);
      String _plus_2 = (_plus_1 + ";");
      a = _plus_2;
    } else {
      if ((type instanceof ComplexType)) {
        String _name_1 = ((ComplexType)type).getName();
        String _plus_3 = (_name_1 + " ");
        String _name_2 = e.getName();
        String _plus_4 = (_plus_3 + _name_2);
        String _plus_5 = (_plus_4 + ";");
        a = _plus_5;
      } else {
        if ((type instanceof Party)) {
          String _name_3 = e.getName();
          String _plus_6 = ("address " + _name_3);
          String _plus_7 = (_plus_6 + ";");
          a = _plus_7;
        }
      }
    }
    return a;
  }
  
  public CharSequence compileTypes(final ComplexType e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("struct ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Field> _fields = e.getFields();
      for(final Field f : _fields) {
        _builder.append("\t");
        CharSequence _compileFields = this.compileFields(f);
        _builder.append(_compileFields, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAssets(final Asset e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("struct ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Field> _fields = e.getFields();
      for(final Field f : _fields) {
        _builder.append("\t");
        CharSequence _compileFields = this.compileFields(f);
        _builder.append(_compileFields, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function register");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("() public {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//USER CODE HERE");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//CHECK");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function unregister");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append("() public {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//USER CODE HERE");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//CHECK");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function transfer");
    String _name_3 = e.getName();
    _builder.append(_name_3);
    _builder.append("() public {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//USER CODE HERE");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//CHECK");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileConstructor(final Contract e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("start = now;");
    _builder.newLine();
    {
      EList<Party> _parties = e.getParties();
      for(final Party f : _parties) {
        _builder.append("\t");
        String _name_1 = f.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" = new ");
        String _name_2 = f.getName();
        _builder.append(_name_2, "\t");
        _builder.append("T();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileModifier(final Contract e) {
    String result = "";
    EList<Party> _parties = e.getParties();
    for (final Party f : _parties) {
      String _name = f.getName();
      boolean _notEquals = (!Objects.equal(_name, "everyone"));
      if (_notEquals) {
        String _result = result;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("modifier only");
        String _name_1 = f.getName();
        _builder.append(_name_1);
        _builder.append("{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("require(");
        String _name_2 = f.getName();
        _builder.append(_name_2, "\t");
        _builder.append(".contains(msg.sender));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("_;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        result = (_result + _builder);
      }
    }
    EList<Term> _terms = e.getTerms();
    for (final Term f_1 : _terms) {
      Expression _condition = f_1.getCondition();
      boolean _tripleNotEquals = (_condition != null);
      if (_tripleNotEquals) {
        String _result_1 = result;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("modifier ");
        String _name_3 = f_1.getName();
        _builder_1.append(_name_3);
        _builder_1.append("Modifier{");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("require(");
        String _compile = f_1.getCondition().compile(20, 0);
        _builder_1.append(_compile, "\t");
        _builder_1.append(");");
        _builder_1.newLineIfNotEmpty();
        result = (_result_1 + _builder_1);
        EList<TransferOperation> _transferOperations = f_1.getTransferOperations();
        for (final TransferOperation t : _transferOperations) {
          if ((t instanceof Deposit)) {
            String _result_2 = result;
            CharSequence _compileTransfer = this.compileTransfer(t);
            String _plus = ("\t" + _compileTransfer);
            result = (_result_2 + _plus);
          }
        }
        String _result_3 = result;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("\t");
        _builder_2.append("_;");
        _builder_2.newLine();
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.newLine();
        result = (_result_3 + _builder_2);
        int _length = ((Object[])Conversions.unwrapArray(f_1.getBreachOperations(), Object.class)).length;
        boolean _notEquals_1 = (_length != 0);
        if (_notEquals_1) {
          String _result_4 = result;
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("modifier ");
          String _name_4 = f_1.getName();
          _builder_3.append(_name_4);
          _builder_3.append("BreachModifier{");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("require(!(");
          String _compile_1 = f_1.getCondition().compile(20, 0);
          _builder_3.append(_compile_1, "\t");
          _builder_3.append("));");
          _builder_3.newLineIfNotEmpty();
          result = (_result_4 + _builder_3);
          EList<TransferOperation> _transferOperations_1 = f_1.getTransferOperations();
          for (final TransferOperation t_1 : _transferOperations_1) {
            if ((t_1 instanceof Deposit)) {
              String _result_5 = result;
              CharSequence _compileTransfer_1 = this.compileTransfer(t_1);
              String _plus_1 = ("\t" + _compileTransfer_1);
              result = (_result_5 + _plus_1);
            }
          }
          String _result_6 = result;
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("\t");
          _builder_4.append("_;");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.newLine();
          result = (_result_6 + _builder_4);
        }
      }
    }
    return result;
  }
  
  public static CharSequence getTypeName(final Type p) {
    if ((p instanceof PrimitiveType)) {
      return ((PrimitiveType)p).getInstanceType();
    } else {
      return p.getName();
    }
  }
  
  public CharSequence compileTerms(final Term e) {
    String result = "";
    String _result = result;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = e.getAction().getName();
    _builder.append(_name);
    _builder.append("(");
    result = (_result + _builder);
    EObject _eContainer = e.eContainer();
    final Function1<Party, Boolean> _function = (Party a) -> {
      String _name_1 = a.getName();
      String _name_2 = e.getParty().getName();
      return Boolean.valueOf(Objects.equal(_name_1, _name_2));
    };
    Party p = IterableExtensions.<Party>findFirst(((Contract) _eContainer).getParties(), _function);
    final Function1<Action, Boolean> _function_1 = (Action a) -> {
      String _name_1 = a.getName();
      String _name_2 = e.getAction().getName();
      return Boolean.valueOf(Objects.equal(_name_1, _name_2));
    };
    Action q = IterableExtensions.<Action>findFirst(p.getActions(), _function_1);
    EList<Field> r = q.getParameters();
    for (final Field af : r) {
      String _result_1 = result;
      CharSequence _typeName = SmartContractSpecificationGenerator.getTypeName(af.getType());
      String _plus = (_typeName + " ");
      String _name_1 = af.getName();
      String _plus_1 = (_plus + _name_1);
      String _plus_2 = (_plus_1 + ", ");
      result = (_result_1 + _plus_2);
    }
    int _size = r.size();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      int _length = result.length();
      int _minus = (_length - 2);
      result = result.substring(0, _minus);
    }
    String _result_2 = result;
    result = (_result_2 + ") ");
    String _result_3 = result;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("only");
    String _name_2 = e.getParty().getName();
    _builder_1.append(_name_2);
    _builder_1.append("() ");
    result = (_result_3 + _builder_1);
    Expression _condition = e.getCondition();
    boolean _tripleNotEquals = (_condition != null);
    if (_tripleNotEquals) {
      String _result_4 = result;
      String _name_3 = e.getName();
      String _plus_3 = (_name_3 + "Modifier() ");
      result = (_result_4 + _plus_3);
    }
    String _result_5 = result;
    result = (_result_5 + "public ");
    int _length_1 = ((Object[])Conversions.unwrapArray(e.getTransferOperations(), Object.class)).length;
    boolean _notEquals_1 = (_length_1 != 0);
    if (_notEquals_1) {
      String _result_6 = result;
      result = (_result_6 + "payable ");
    }
    String _result_7 = result;
    result = (_result_7 + "{\n");
    String _result_8 = result;
    result = (_result_8 + "\t//USER CODE HERE\n");
    Expression _postCondition = e.getPostCondition();
    boolean _tripleNotEquals_1 = (_postCondition != null);
    if (_tripleNotEquals_1) {
      String _result_9 = result;
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\t");
      String _compile = e.getPostCondition().compile(20, 2);
      _builder_2.append(_compile, "\t");
      result = (_result_9 + _builder_2);
      String _result_10 = result;
      result = (_result_10 + ";\n");
    }
    EList<TransferOperation> _transferOperations = e.getTransferOperations();
    boolean _tripleNotEquals_2 = (_transferOperations != null);
    if (_tripleNotEquals_2) {
      EList<TransferOperation> _transferOperations_1 = e.getTransferOperations();
      for (final TransferOperation f : _transferOperations_1) {
        if ((!(f instanceof Deposit))) {
          String _result_11 = result;
          CharSequence _compileTransfer = this.compileTransfer(f);
          String _plus_4 = ("\t" + _compileTransfer);
          result = (_result_11 + _plus_4);
        }
      }
    }
    String _result_12 = result;
    result = (_result_12 + "\t//CHECK\n");
    Expression _postCondition_1 = e.getPostCondition();
    boolean _tripleNotEquals_3 = (_postCondition_1 != null);
    if (_tripleNotEquals_3) {
      String _result_13 = result;
      CharSequence _compilePostCondition = this.compilePostCondition(e.getPostCondition());
      String _plus_5 = ("\t" + _compilePostCondition);
      result = (_result_13 + _plus_5);
    }
    String _result_14 = result;
    result = (_result_14 + "\n}\n\n");
    int _length_2 = ((Object[])Conversions.unwrapArray(e.getBreachOperations(), Object.class)).length;
    boolean _notEquals_2 = (_length_2 != 0);
    if (_notEquals_2) {
      String _result_15 = result;
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("function ");
      String _name_4 = e.getAction().getName();
      _builder_3.append(_name_4);
      _builder_3.append("Breach(");
      result = (_result_15 + _builder_3);
      for (final Field af_1 : r) {
        String _result_16 = result;
        CharSequence _typeName_1 = SmartContractSpecificationGenerator.getTypeName(af_1.getType());
        String _plus_6 = (_typeName_1 + " ");
        String _name_5 = af_1.getName();
        String _plus_7 = (_plus_6 + _name_5);
        String _plus_8 = (_plus_7 + ", ");
        result = (_result_16 + _plus_8);
      }
      int _size_1 = r.size();
      boolean _notEquals_3 = (_size_1 != 0);
      if (_notEquals_3) {
        int _length_3 = result.length();
        int _minus_1 = (_length_3 - 2);
        result = result.substring(0, _minus_1);
      }
      String _result_17 = result;
      result = (_result_17 + ") ");
      String _result_18 = result;
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("only");
      String _name_6 = e.getParty().getName();
      _builder_4.append(_name_6);
      _builder_4.append("() ");
      result = (_result_18 + _builder_4);
      Expression _condition_1 = e.getCondition();
      boolean _tripleNotEquals_4 = (_condition_1 != null);
      if (_tripleNotEquals_4) {
        String _result_19 = result;
        String _name_7 = e.getName();
        String _plus_9 = (_name_7 + "BreachModifier() ");
        result = (_result_19 + _plus_9);
      }
      String _result_20 = result;
      result = (_result_20 + "public ");
      int _length_4 = ((Object[])Conversions.unwrapArray(e.getTransferOperations(), Object.class)).length;
      boolean _notEquals_4 = (_length_4 != 0);
      if (_notEquals_4) {
        String _result_21 = result;
        result = (_result_21 + "payable ");
      }
      String _result_22 = result;
      result = (_result_22 + "{\n");
      String _result_23 = result;
      result = (_result_23 + "\t//USER CODE HERE\n");
      Expression _postCondition_2 = e.getPostCondition();
      boolean _tripleNotEquals_5 = (_postCondition_2 != null);
      if (_tripleNotEquals_5) {
        String _result_24 = result;
        StringConcatenation _builder_5 = new StringConcatenation();
        _builder_5.append("\t");
        String _compile_1 = e.getPostCondition().compile(20, 2);
        _builder_5.append(_compile_1, "\t");
        result = (_result_24 + _builder_5);
        String _result_25 = result;
        result = (_result_25 + ";\n");
      }
      EList<TransferOperation> _breachOperations = e.getBreachOperations();
      boolean _tripleNotEquals_6 = (_breachOperations != null);
      if (_tripleNotEquals_6) {
        EList<TransferOperation> _breachOperations_1 = e.getBreachOperations();
        for (final TransferOperation f_1 : _breachOperations_1) {
          if ((!(f_1 instanceof Deposit))) {
            String _result_26 = result;
            CharSequence _compileTransfer_1 = this.compileTransfer(f_1);
            String _plus_10 = ("\t" + _compileTransfer_1);
            result = (_result_26 + _plus_10);
          }
        }
      }
      String _result_27 = result;
      result = (_result_27 + "\t//CHECK\n");
      Expression _postCondition_3 = e.getPostCondition();
      boolean _tripleNotEquals_7 = (_postCondition_3 != null);
      if (_tripleNotEquals_7) {
        String _result_28 = result;
        CharSequence _compilePostCondition_1 = this.compilePostCondition(e.getPostCondition());
        String _plus_11 = ("\t" + _compilePostCondition_1);
        result = (_result_28 + _plus_11);
      }
      String _result_29 = result;
      result = (_result_29 + "\n}\n\n");
    }
    return result;
  }
  
  public CharSequence compileTransfer(final TransferOperation e) {
    if ((e instanceof Deposit)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("require(");
      String _compile = ((Deposit)e).getMoney().getCondition().compile(20, 0);
      _builder.append(_compile);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      return _builder;
    }
    if ((e instanceof Withdraw)) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("msg.sender.transfer(");
      String _compile_1 = ((Withdraw)e).getMoney().getCondition().compile(20, 0);
      _builder_1.append(_compile_1);
      _builder_1.append(");");
      _builder_1.newLineIfNotEmpty();
      return _builder_1;
    }
    if ((e instanceof Transfer)) {
      StringConcatenation _builder_2 = new StringConcatenation();
      String _compile_2 = ((Transfer)e).getAccount().compile(20, 0);
      _builder_2.append(_compile_2);
      _builder_2.append(".transfer(");
      String _compile_3 = ((Transfer)e).getMoney().getCondition().compile(20, 0);
      _builder_2.append(_compile_3);
      _builder_2.append(");");
      _builder_2.newLineIfNotEmpty();
      return _builder_2;
    }
    return null;
  }
  
  public CharSequence compilePostCondition(final Expression e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("assert(");
    String _compile = e.compile(20, 0);
    _builder.append(_compile);
    _builder.append(");");
    return _builder;
  }
}
