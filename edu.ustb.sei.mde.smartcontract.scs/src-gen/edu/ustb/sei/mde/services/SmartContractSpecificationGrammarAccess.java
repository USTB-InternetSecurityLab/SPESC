/*
 * generated by Xtext 2.22.0
 */
package edu.ustb.sei.mde.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmartContractSpecificationGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesPartyParserRuleCall_3_0 = (RuleCall)cPartiesAssignment_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTermsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTermsTermParserRuleCall_5_0_0 = (RuleCall)cTermsAssignment_5_0.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTypesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypesComplexTypeParserRuleCall_6_0 = (RuleCall)cTypesAssignment_6.eContents().get(0);
		private final Assignment cAssetsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssetsAssetParserRuleCall_7_0 = (RuleCall)cAssetsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Contract:
		//	'contract'
		//	name=ID
		//	'{'
		//	parties+=Party+
		//	fields+=Field* (terms+=Term '.')*
		//	types+=ComplexType*
		//	assets+=Asset*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'contract' name=ID '{' parties+=Party+ fields+=Field* (terms+=Term '.')* types+=ComplexType* assets+=Asset* '}'
		public Group getGroup() { return cGroup; }
		
		//'contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parties+=Party+
		public Assignment getPartiesAssignment_3() { return cPartiesAssignment_3; }
		
		//Party
		public RuleCall getPartiesPartyParserRuleCall_3_0() { return cPartiesPartyParserRuleCall_3_0; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0() { return cFieldsFieldParserRuleCall_4_0; }
		
		//(terms+=Term '.')*
		public Group getGroup_5() { return cGroup_5; }
		
		//terms+=Term
		public Assignment getTermsAssignment_5_0() { return cTermsAssignment_5_0; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_5_0_0() { return cTermsTermParserRuleCall_5_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }
		
		//types+=ComplexType*
		public Assignment getTypesAssignment_6() { return cTypesAssignment_6; }
		
		//ComplexType
		public RuleCall getTypesComplexTypeParserRuleCall_6_0() { return cTypesComplexTypeParserRuleCall_6_0; }
		
		//assets+=Asset*
		public Assignment getAssetsAssignment_7() { return cAssetsAssignment_7; }
		
		//Asset
		public RuleCall getAssetsAssetParserRuleCall_7_0() { return cAssetsAssetParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComplexType:
		//	'type' name=ID '{' fields+=Field* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '{' fields+=Field* '}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AssetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Asset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInfoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsFieldParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFieldsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFieldsFieldParserRuleCall_9_0 = (RuleCall)cFieldsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Asset:
		//	'asset' name=ID '{'
		//	'info' '{'
		//	fields+=Field*
		//	'}'
		//	'right' '{'
		//	fields+=Field*
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'asset' name=ID '{' 'info' '{' fields+=Field* '}' 'right' '{' fields+=Field* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'asset'
		public Keyword getAssetKeyword_0() { return cAssetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'info'
		public Keyword getInfoKeyword_3() { return cInfoKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0() { return cFieldsFieldParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'right'
		public Keyword getRightKeyword_7() { return cRightKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_9() { return cFieldsAssignment_9; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_9_0() { return cFieldsFieldParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.enumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectionsSelectionParserRuleCall_3_0 = (RuleCall)cSelectionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSelectionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSelectionsSelectionParserRuleCall_4_1_0 = (RuleCall)cSelectionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//enumType:
		//	'enum' name=ID '{' selections+=Selection (',' selections+=Selection)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' selections+=Selection (',' selections+=Selection)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//selections+=Selection
		public Assignment getSelectionsAssignment_3() { return cSelectionsAssignment_3; }
		
		//Selection
		public RuleCall getSelectionsSelectionParserRuleCall_3_0() { return cSelectionsSelectionParserRuleCall_3_0; }
		
		//(',' selections+=Selection)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//selections+=Selection
		public Assignment getSelectionsAssignment_4_1() { return cSelectionsAssignment_4_1; }
		
		//Selection
		public RuleCall getSelectionsSelectionParserRuleCall_4_1_0() { return cSelectionsSelectionParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Selection");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Selection:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cManyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cManySetKeyword_2_0 = (Keyword)cManyAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		private final RuleCall cSLDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Field:
		//	name=ID ':' many?='set'? type=[Type] SLD?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' many?='set'? type=[Type] SLD?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//many?='set'?
		public Assignment getManyAssignment_2() { return cManyAssignment_2; }
		
		//'set'
		public Keyword getManySetKeyword_2_0() { return cManySetKeyword_2_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_0_1() { return cTypeTypeIDTerminalRuleCall_3_0_1; }
		
		//SLD?
		public RuleCall getSLDTerminalRuleCall_4() { return cSLDTerminalRuleCall_4; }
	}
	public class PartyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Party");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSinglePartyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPartyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cFieldsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_0_4_0 = (RuleCall)cFieldsAssignment_0_4.eContents().get(0);
		private final Assignment cActionsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_0_5_0 = (RuleCall)cActionsAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGroupPartyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPartyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGroupKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFieldsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFieldsFieldParserRuleCall_1_5_0 = (RuleCall)cFieldsAssignment_1_5.eContents().get(0);
		private final Assignment cActionsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cActionsActionParserRuleCall_1_6_0 = (RuleCall)cActionsAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExternalPartyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExternalKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPartyKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Assignment cActionsAssignment_2_5_0 = (Assignment)cGroup_2_5.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_2_5_0_0 = (RuleCall)cActionsAssignment_2_5_0.eContents().get(0);
		private final Group cGroup_2_5_1 = (Group)cGroup_2_5.eContents().get(1);
		private final Keyword cCommaKeyword_2_5_1_0 = (Keyword)cGroup_2_5_1.eContents().get(0);
		private final Assignment cActionsAssignment_2_5_1_1 = (Assignment)cGroup_2_5_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_2_5_1_1_0 = (RuleCall)cActionsAssignment_2_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//Party:
		//	{SingleParty} 'party' name=ID '{' fields+=Field* actions+=Action* '}'
		//	| {GroupParty} 'party' 'group' name=ID '{' fields+=Field* actions+=Action* '}'
		//	| {ExternalParty} 'external' 'party' name=ID '{' (actions+=Action (',' actions+=Action)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleParty} 'party' name=ID '{' fields+=Field* actions+=Action* '}' | {GroupParty} 'party' 'group' name=ID '{'
		//fields+=Field* actions+=Action* '}' | {ExternalParty} 'external' 'party' name=ID '{' (actions+=Action (','
		//actions+=Action)*)? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SingleParty} 'party' name=ID '{' fields+=Field* actions+=Action* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SingleParty}
		public Action getSinglePartyAction_0_0() { return cSinglePartyAction_0_0; }
		
		//'party'
		public Keyword getPartyKeyword_0_1() { return cPartyKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_0_4() { return cFieldsAssignment_0_4; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_4_0() { return cFieldsFieldParserRuleCall_0_4_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_0_5() { return cActionsAssignment_0_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_0_5_0() { return cActionsActionParserRuleCall_0_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }
		
		//{GroupParty} 'party' 'group' name=ID '{' fields+=Field* actions+=Action* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{GroupParty}
		public Action getGroupPartyAction_1_0() { return cGroupPartyAction_1_0; }
		
		//'party'
		public Keyword getPartyKeyword_1_1() { return cPartyKeyword_1_1; }
		
		//'group'
		public Keyword getGroupKeyword_1_2() { return cGroupKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_1_5() { return cFieldsAssignment_1_5; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_5_0() { return cFieldsFieldParserRuleCall_1_5_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_1_6() { return cActionsAssignment_1_6; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_6_0() { return cActionsActionParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
		
		//{ExternalParty} 'external' 'party' name=ID '{' (actions+=Action (',' actions+=Action)*)? '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ExternalParty}
		public Action getExternalPartyAction_2_0() { return cExternalPartyAction_2_0; }
		
		//'external'
		public Keyword getExternalKeyword_2_1() { return cExternalKeyword_2_1; }
		
		//'party'
		public Keyword getPartyKeyword_2_2() { return cPartyKeyword_2_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_3_0() { return cNameIDTerminalRuleCall_2_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_4() { return cLeftCurlyBracketKeyword_2_4; }
		
		//(actions+=Action (',' actions+=Action)*)?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2_5_0() { return cActionsAssignment_2_5_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_5_0_0() { return cActionsActionParserRuleCall_2_5_0_0; }
		
		//(',' actions+=Action)*
		public Group getGroup_2_5_1() { return cGroup_2_5_1; }
		
		//','
		public Keyword getCommaKeyword_2_5_1_0() { return cCommaKeyword_2_5_1_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2_5_1_1() { return cActionsAssignment_2_5_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_5_1_1_0() { return cActionsActionParserRuleCall_2_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersFieldParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersFieldParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_4_1_0 = (CrossReference)cTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTypeTypeCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cSLDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cIsManyAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cIsManyPlusSignKeyword_6_0_0 = (Keyword)cIsManyAssignment_6_0.eContents().get(0);
		private final Assignment cTimesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTimesINTTerminalRuleCall_6_1_0 = (RuleCall)cTimesAssignment_6_1.eContents().get(0);
		
		//Action:
		//	name=ID '(' (parameters+=Field (',' parameters+=Field)*)? ')' (':' type=[Type])? SLD? (IsMany?='+' Times=INT?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parameters+=Field (',' parameters+=Field)*)? ')' (':' type=[Type])? SLD? (IsMany?='+' Times=INT?)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Field (',' parameters+=Field)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Field
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Field
		public RuleCall getParametersFieldParserRuleCall_2_0_0() { return cParametersFieldParserRuleCall_2_0_0; }
		
		//(',' parameters+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Field
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Field
		public RuleCall getParametersFieldParserRuleCall_2_1_1_0() { return cParametersFieldParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(':' type=[Type])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_4_1_0() { return cTypeTypeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_4_1_0_1() { return cTypeTypeIDTerminalRuleCall_4_1_0_1; }
		
		//SLD?
		public RuleCall getSLDTerminalRuleCall_5() { return cSLDTerminalRuleCall_5; }
		
		//(IsMany?='+' Times=INT?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//IsMany?='+'
		public Assignment getIsManyAssignment_6_0() { return cIsManyAssignment_6_0; }
		
		//'+'
		public Keyword getIsManyPlusSignKeyword_6_0_0() { return cIsManyPlusSignKeyword_6_0_0; }
		
		//Times=INT?
		public Assignment getTimesAssignment_6_1() { return cTimesAssignment_6_1; }
		
		//INT
		public RuleCall getTimesINTTerminalRuleCall_6_1_0() { return cTimesINTTerminalRuleCall_6_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRightTermAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAutoAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cAutoAutoKeyword_0_1_0 = (Keyword)cAutoAssignment_0_1.eContents().get(0);
		private final Assignment cBreakAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cBreakBreakKeyword_0_2_0 = (Keyword)cBreakAssignment_0_2.eContents().get(0);
		private final Keyword cTermKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_0_4_0 = (RuleCall)cNameAssignment_0_4.eContents().get(0);
		private final Keyword cColonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cPartyAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final CrossReference cPartyPartyCrossReference_0_6_0 = (CrossReference)cPartyAssignment_0_6.eContents().get(0);
		private final RuleCall cPartyPartyIDTerminalRuleCall_0_6_0_1 = (RuleCall)cPartyPartyCrossReference_0_6_0.eContents().get(1);
		private final Keyword cCanKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Assignment cActionAssignment_0_8 = (Assignment)cGroup_0.eContents().get(8);
		private final CrossReference cActionActionCrossReference_0_8_0 = (CrossReference)cActionAssignment_0_8.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_0_8_0_1 = (RuleCall)cActionActionCrossReference_0_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_9 = (Keyword)cGroup_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cWhenKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final Assignment cConditionAssignment_0_10_1 = (Assignment)cGroup_0_10.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_0_10_1_0 = (RuleCall)cConditionAssignment_0_10_1.eContents().get(0);
		private final Group cGroup_0_11 = (Group)cGroup_0.eContents().get(11);
		private final Keyword cWhileKeyword_0_11_0 = (Keyword)cGroup_0_11.eContents().get(0);
		private final Assignment cTransferOperationsAssignment_0_11_1 = (Assignment)cGroup_0_11.eContents().get(1);
		private final RuleCall cTransferOperationsTransferOperationParserRuleCall_0_11_1_0 = (RuleCall)cTransferOperationsAssignment_0_11_1.eContents().get(0);
		private final Group cGroup_0_12 = (Group)cGroup_0.eContents().get(12);
		private final Keyword cWhereKeyword_0_12_0 = (Keyword)cGroup_0_12.eContents().get(0);
		private final Assignment cPostConditionAssignment_0_12_1 = (Assignment)cGroup_0_12.eContents().get(1);
		private final RuleCall cPostConditionExpressionParserRuleCall_0_12_1_0 = (RuleCall)cPostConditionAssignment_0_12_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDutyTermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAutoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAutoAutoKeyword_1_1_0 = (Keyword)cAutoAssignment_1_1.eContents().get(0);
		private final Assignment cBreakAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cBreakBreakKeyword_1_2_0 = (Keyword)cBreakAssignment_1_2.eContents().get(0);
		private final Keyword cTermKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final Keyword cColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cPartyAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final CrossReference cPartyPartyCrossReference_1_6_0 = (CrossReference)cPartyAssignment_1_6.eContents().get(0);
		private final RuleCall cPartyPartyIDTerminalRuleCall_1_6_0_1 = (RuleCall)cPartyPartyCrossReference_1_6_0.eContents().get(1);
		private final Keyword cMustKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cActionAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final CrossReference cActionActionCrossReference_1_8_0 = (CrossReference)cActionAssignment_1_8.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_1_8_0_1 = (RuleCall)cActionActionCrossReference_1_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Group cGroup_1_10 = (Group)cGroup_1.eContents().get(10);
		private final Keyword cWhenKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final Assignment cConditionAssignment_1_10_1 = (Assignment)cGroup_1_10.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_10_1_0 = (RuleCall)cConditionAssignment_1_10_1.eContents().get(0);
		private final Group cGroup_1_11 = (Group)cGroup_1.eContents().get(11);
		private final Keyword cWhileKeyword_1_11_0 = (Keyword)cGroup_1_11.eContents().get(0);
		private final Assignment cTransferOperationsAssignment_1_11_1 = (Assignment)cGroup_1_11.eContents().get(1);
		private final RuleCall cTransferOperationsTransferOperationParserRuleCall_1_11_1_0 = (RuleCall)cTransferOperationsAssignment_1_11_1.eContents().get(0);
		private final Group cGroup_1_12 = (Group)cGroup_1.eContents().get(12);
		private final Keyword cWhereKeyword_1_12_0 = (Keyword)cGroup_1_12.eContents().get(0);
		private final Assignment cPostConditionAssignment_1_12_1 = (Assignment)cGroup_1_12.eContents().get(1);
		private final RuleCall cPostConditionExpressionParserRuleCall_1_12_1_0 = (RuleCall)cPostConditionAssignment_1_12_1.eContents().get(0);
		private final Group cGroup_1_13 = (Group)cGroup_1.eContents().get(13);
		private final Keyword cBreachKeyword_1_13_0 = (Keyword)cGroup_1_13.eContents().get(0);
		private final Assignment cBreachOperationsAssignment_1_13_1 = (Assignment)cGroup_1_13.eContents().get(1);
		private final RuleCall cBreachOperationsTransferOperationParserRuleCall_1_13_1_0 = (RuleCall)cBreachOperationsAssignment_1_13_1.eContents().get(0);
		
		//Term:
		//	{RightTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'can' action=[Action] ','? ('when'
		//	condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)?
		//	| {DutyTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'must' action=[Action] ','? ('when'
		//	condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)? ('breach'
		//	breachOperations+=TransferOperation+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RightTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'can' action=[Action] ','? ('when'
		//condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)? |
		//{DutyTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'must' action=[Action] ','? ('when'
		//condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)? ('breach'
		//breachOperations+=TransferOperation+)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RightTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'can' action=[Action] ','? ('when'
		//condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{RightTerm}
		public Action getRightTermAction_0_0() { return cRightTermAction_0_0; }
		
		//auto?='auto'?
		public Assignment getAutoAssignment_0_1() { return cAutoAssignment_0_1; }
		
		//'auto'
		public Keyword getAutoAutoKeyword_0_1_0() { return cAutoAutoKeyword_0_1_0; }
		
		//break?='break'?
		public Assignment getBreakAssignment_0_2() { return cBreakAssignment_0_2; }
		
		//'break'
		public Keyword getBreakBreakKeyword_0_2_0() { return cBreakBreakKeyword_0_2_0; }
		
		//'term'
		public Keyword getTermKeyword_0_3() { return cTermKeyword_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_4_0() { return cNameIDTerminalRuleCall_0_4_0; }
		
		//':'
		public Keyword getColonKeyword_0_5() { return cColonKeyword_0_5; }
		
		//party=[Party]
		public Assignment getPartyAssignment_0_6() { return cPartyAssignment_0_6; }
		
		//[Party]
		public CrossReference getPartyPartyCrossReference_0_6_0() { return cPartyPartyCrossReference_0_6_0; }
		
		//ID
		public RuleCall getPartyPartyIDTerminalRuleCall_0_6_0_1() { return cPartyPartyIDTerminalRuleCall_0_6_0_1; }
		
		//'can'
		public Keyword getCanKeyword_0_7() { return cCanKeyword_0_7; }
		
		//action=[Action]
		public Assignment getActionAssignment_0_8() { return cActionAssignment_0_8; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_0_8_0() { return cActionActionCrossReference_0_8_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_0_8_0_1() { return cActionActionIDTerminalRuleCall_0_8_0_1; }
		
		//','?
		public Keyword getCommaKeyword_0_9() { return cCommaKeyword_0_9; }
		
		//('when' condition=Expression)?
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//'when'
		public Keyword getWhenKeyword_0_10_0() { return cWhenKeyword_0_10_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_0_10_1() { return cConditionAssignment_0_10_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_10_1_0() { return cConditionExpressionParserRuleCall_0_10_1_0; }
		
		//('while' transferOperations+=TransferOperation+)?
		public Group getGroup_0_11() { return cGroup_0_11; }
		
		//'while'
		public Keyword getWhileKeyword_0_11_0() { return cWhileKeyword_0_11_0; }
		
		//transferOperations+=TransferOperation+
		public Assignment getTransferOperationsAssignment_0_11_1() { return cTransferOperationsAssignment_0_11_1; }
		
		//TransferOperation
		public RuleCall getTransferOperationsTransferOperationParserRuleCall_0_11_1_0() { return cTransferOperationsTransferOperationParserRuleCall_0_11_1_0; }
		
		//('where' postCondition=Expression)?
		public Group getGroup_0_12() { return cGroup_0_12; }
		
		//'where'
		public Keyword getWhereKeyword_0_12_0() { return cWhereKeyword_0_12_0; }
		
		//postCondition=Expression
		public Assignment getPostConditionAssignment_0_12_1() { return cPostConditionAssignment_0_12_1; }
		
		//Expression
		public RuleCall getPostConditionExpressionParserRuleCall_0_12_1_0() { return cPostConditionExpressionParserRuleCall_0_12_1_0; }
		
		//{DutyTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'must' action=[Action] ','? ('when'
		//condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)? ('breach'
		//breachOperations+=TransferOperation+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{DutyTerm}
		public Action getDutyTermAction_1_0() { return cDutyTermAction_1_0; }
		
		//auto?='auto'?
		public Assignment getAutoAssignment_1_1() { return cAutoAssignment_1_1; }
		
		//'auto'
		public Keyword getAutoAutoKeyword_1_1_0() { return cAutoAutoKeyword_1_1_0; }
		
		//break?='break'?
		public Assignment getBreakAssignment_1_2() { return cBreakAssignment_1_2; }
		
		//'break'
		public Keyword getBreakBreakKeyword_1_2_0() { return cBreakBreakKeyword_1_2_0; }
		
		//'term'
		public Keyword getTermKeyword_1_3() { return cTermKeyword_1_3; }
		
		//name=ID
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_4_0() { return cNameIDTerminalRuleCall_1_4_0; }
		
		//':'
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }
		
		//party=[Party]
		public Assignment getPartyAssignment_1_6() { return cPartyAssignment_1_6; }
		
		//[Party]
		public CrossReference getPartyPartyCrossReference_1_6_0() { return cPartyPartyCrossReference_1_6_0; }
		
		//ID
		public RuleCall getPartyPartyIDTerminalRuleCall_1_6_0_1() { return cPartyPartyIDTerminalRuleCall_1_6_0_1; }
		
		//'must'
		public Keyword getMustKeyword_1_7() { return cMustKeyword_1_7; }
		
		//action=[Action]
		public Assignment getActionAssignment_1_8() { return cActionAssignment_1_8; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_1_8_0() { return cActionActionCrossReference_1_8_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_1_8_0_1() { return cActionActionIDTerminalRuleCall_1_8_0_1; }
		
		//','?
		public Keyword getCommaKeyword_1_9() { return cCommaKeyword_1_9; }
		
		//('when' condition=Expression)?
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//'when'
		public Keyword getWhenKeyword_1_10_0() { return cWhenKeyword_1_10_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_10_1() { return cConditionAssignment_1_10_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_10_1_0() { return cConditionExpressionParserRuleCall_1_10_1_0; }
		
		//('while' transferOperations+=TransferOperation+)?
		public Group getGroup_1_11() { return cGroup_1_11; }
		
		//'while'
		public Keyword getWhileKeyword_1_11_0() { return cWhileKeyword_1_11_0; }
		
		//transferOperations+=TransferOperation+
		public Assignment getTransferOperationsAssignment_1_11_1() { return cTransferOperationsAssignment_1_11_1; }
		
		//TransferOperation
		public RuleCall getTransferOperationsTransferOperationParserRuleCall_1_11_1_0() { return cTransferOperationsTransferOperationParserRuleCall_1_11_1_0; }
		
		//('where' postCondition=Expression)?
		public Group getGroup_1_12() { return cGroup_1_12; }
		
		//'where'
		public Keyword getWhereKeyword_1_12_0() { return cWhereKeyword_1_12_0; }
		
		//postCondition=Expression
		public Assignment getPostConditionAssignment_1_12_1() { return cPostConditionAssignment_1_12_1; }
		
		//Expression
		public RuleCall getPostConditionExpressionParserRuleCall_1_12_1_0() { return cPostConditionExpressionParserRuleCall_1_12_1_0; }
		
		//('breach' breachOperations+=TransferOperation+)?
		public Group getGroup_1_13() { return cGroup_1_13; }
		
		//'breach'
		public Keyword getBreachKeyword_1_13_0() { return cBreachKeyword_1_13_0; }
		
		//breachOperations+=TransferOperation+
		public Assignment getBreachOperationsAssignment_1_13_1() { return cBreachOperationsAssignment_1_13_1; }
		
		//TransferOperation
		public RuleCall getBreachOperationsTransferOperationParserRuleCall_1_13_1_0() { return cBreachOperationsTransferOperationParserRuleCall_1_13_1_0; }
	}
	public class TransferOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TransferOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDepositAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDepositKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMoneyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMoneyMoneyExpressionParserRuleCall_0_2_0 = (RuleCall)cMoneyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWithdrawAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWithdrawKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMoneyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMoneyMoneyExpressionParserRuleCall_1_2_0 = (RuleCall)cMoneyAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTransferAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTransferKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMoneyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMoneyMoneyExpressionParserRuleCall_2_2_0 = (RuleCall)cMoneyAssignment_2_2.eContents().get(0);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cAccountAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cAccountExpressionParserRuleCall_2_4_0 = (RuleCall)cAccountAssignment_2_4.eContents().get(0);
		
		//TransferOperation:
		//	{Deposit} 'deposit' money=MoneyExpression
		//	| {Withdraw} 'withdraw' money=MoneyExpression
		//	| {Transfer} 'transfer' money=MoneyExpression 'to' account=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Deposit} 'deposit' money=MoneyExpression | {Withdraw} 'withdraw' money=MoneyExpression | {Transfer} 'transfer'
		//money=MoneyExpression 'to' account=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Deposit} 'deposit' money=MoneyExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{Deposit}
		public Action getDepositAction_0_0() { return cDepositAction_0_0; }
		
		//'deposit'
		public Keyword getDepositKeyword_0_1() { return cDepositKeyword_0_1; }
		
		//money=MoneyExpression
		public Assignment getMoneyAssignment_0_2() { return cMoneyAssignment_0_2; }
		
		//MoneyExpression
		public RuleCall getMoneyMoneyExpressionParserRuleCall_0_2_0() { return cMoneyMoneyExpressionParserRuleCall_0_2_0; }
		
		//{Withdraw} 'withdraw' money=MoneyExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{Withdraw}
		public Action getWithdrawAction_1_0() { return cWithdrawAction_1_0; }
		
		//'withdraw'
		public Keyword getWithdrawKeyword_1_1() { return cWithdrawKeyword_1_1; }
		
		//money=MoneyExpression
		public Assignment getMoneyAssignment_1_2() { return cMoneyAssignment_1_2; }
		
		//MoneyExpression
		public RuleCall getMoneyMoneyExpressionParserRuleCall_1_2_0() { return cMoneyMoneyExpressionParserRuleCall_1_2_0; }
		
		//{Transfer} 'transfer' money=MoneyExpression 'to' account=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//{Transfer}
		public Action getTransferAction_2_0() { return cTransferAction_2_0; }
		
		//'transfer'
		public Keyword getTransferKeyword_2_1() { return cTransferKeyword_2_1; }
		
		//money=MoneyExpression
		public Assignment getMoneyAssignment_2_2() { return cMoneyAssignment_2_2; }
		
		//MoneyExpression
		public RuleCall getMoneyMoneyExpressionParserRuleCall_2_2_0() { return cMoneyMoneyExpressionParserRuleCall_2_2_0; }
		
		//'to'
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }
		
		//account=Expression
		public Assignment getAccountAssignment_2_4() { return cAccountAssignment_2_4; }
		
		//Expression
		public RuleCall getAccountExpressionParserRuleCall_2_4_0() { return cAccountExpressionParserRuleCall_2_4_0; }
	}
	public class MoneyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.MoneyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoneyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//MoneyExpression:
		//	{MoneyExpression} '$' /*('value'( name = ID)? relationOperator = RelationOperator)?*/ condition=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{MoneyExpression} '$' /*('value'( name = ID)? relationOperator = RelationOperator)?*/ condition=Expression
		public Group getGroup() { return cGroup; }
		
		//{MoneyExpression}
		public Action getMoneyExpressionAction_0() { return cMoneyExpressionAction_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }
		
		///*('value'( name = ID)? relationOperator = RelationOperator)?*/ condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplyExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	ConditionalExpression
		//	| => ImplyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression | => ImplyExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }
		
		//=> ImplyExpression
		public RuleCall getImplyExpressionParserRuleCall_1() { return cImplyExpressionParserRuleCall_1; }
	}
	public class DescriptiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.DescriptiveExpression");
		private final Assignment cPlainTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPlainTextPLAINTEXTTerminalRuleCall_0 = (RuleCall)cPlainTextAssignment.eContents().get(0);
		
		//DescriptiveExpression:
		//	plainText=PLAINTEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//plainText=PLAINTEXT
		public Assignment getPlainTextAssignment() { return cPlainTextAssignment; }
		
		//PLAINTEXT
		public RuleCall getPlainTextPLAINTEXTTerminalRuleCall_0() { return cPlainTextPLAINTEXTTerminalRuleCall_0; }
	}
	public class CollectionSourceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.CollectionSourceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSlotRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cSelectExpressionSourceAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cWhereKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		
		//CollectionSourceExpression:
		//	SlotRef (=> ({SelectExpression.source=current} 'where') condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//SlotRef (=> ({SelectExpression.source=current} 'where') condition=Expression)?
		public Group getGroup() { return cGroup; }
		
		//SlotRef
		public RuleCall getSlotRefParserRuleCall_0() { return cSlotRefParserRuleCall_0; }
		
		//(=> ({SelectExpression.source=current} 'where') condition=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({SelectExpression.source=current} 'where')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({SelectExpression.source=current} 'where')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{SelectExpression.source=current}
		public Action getSelectExpressionSourceAction_1_0_0_0() { return cSelectExpressionSourceAction_1_0_0_0; }
		
		//'where'
		public Keyword getWhereKeyword_1_0_0_1() { return cWhereKeyword_1_0_0_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0; }
	}
	public class IteratorDeclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.IteratorDeclExpression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IteratorDeclExpression:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class QuantifierExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.QuantifierExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQunatifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQunatifierQuantifierEnumRuleCall_0_0 = (RuleCall)cQunatifierAssignment_0.eContents().get(0);
		private final Assignment cIteratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIteratorIteratorDeclExpressionParserRuleCall_1_0 = (RuleCall)cIteratorAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeCollectionSourceExpressionParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		private final Keyword cSuchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionExpressionParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		
		//QuantifierExpression:
		//	qunatifier=Quantifier iterator=IteratorDeclExpression 'in' scope=CollectionSourceExpression 'such' 'that'
		//	condition=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//qunatifier=Quantifier iterator=IteratorDeclExpression 'in' scope=CollectionSourceExpression 'such' 'that'
		//condition=Expression
		public Group getGroup() { return cGroup; }
		
		//qunatifier=Quantifier
		public Assignment getQunatifierAssignment_0() { return cQunatifierAssignment_0; }
		
		//Quantifier
		public RuleCall getQunatifierQuantifierEnumRuleCall_0_0() { return cQunatifierQuantifierEnumRuleCall_0_0; }
		
		//iterator=IteratorDeclExpression
		public Assignment getIteratorAssignment_1() { return cIteratorAssignment_1; }
		
		//IteratorDeclExpression
		public RuleCall getIteratorIteratorDeclExpressionParserRuleCall_1_0() { return cIteratorIteratorDeclExpressionParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//scope=CollectionSourceExpression
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }
		
		//CollectionSourceExpression
		public RuleCall getScopeCollectionSourceExpressionParserRuleCall_3_0() { return cScopeCollectionSourceExpressionParserRuleCall_3_0; }
		
		//'such'
		public Keyword getSuchKeyword_4() { return cSuchKeyword_4; }
		
		//'that'
		public Keyword getThatKeyword_5() { return cThatKeyword_5; }
		
		//condition=Expression
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_0() { return cConditionExpressionParserRuleCall_6_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenBranchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenBranchExpressionParserRuleCall_3_0 = (RuleCall)cThenBranchAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseBranchExpressionParserRuleCall_5_0 = (RuleCall)cElseBranchAssignment_5.eContents().get(0);
		
		//ConditionalExpression:
		//	'if' condition=Expression 'then' thenBranch=Expression 'else' elseBranch=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression 'then' thenBranch=Expression 'else' elseBranch=Expression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenBranch=Expression
		public Assignment getThenBranchAssignment_3() { return cThenBranchAssignment_3; }
		
		//Expression
		public RuleCall getThenBranchExpressionParserRuleCall_3_0() { return cThenBranchExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseBranch=Expression
		public Assignment getElseBranchAssignment_5() { return cElseBranchAssignment_5; }
		
		//Expression
		public RuleCall getElseBranchExpressionParserRuleCall_5_0() { return cElseBranchExpressionParserRuleCall_5_0; }
	}
	public class ImplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ImplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cImplyExpressionConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cImpliesKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cImpliedAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImpliedExpressionParserRuleCall_1_1_0 = (RuleCall)cImpliedAssignment_1_1.eContents().get(0);
		
		//ImplyExpression Expression:
		//	OrExpression (=> ({ImplyExpression.condition=current} 'implies') implied=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression (=> ({ImplyExpression.condition=current} 'implies') implied=Expression)?
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//(=> ({ImplyExpression.condition=current} 'implies') implied=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ImplyExpression.condition=current} 'implies')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({ImplyExpression.condition=current} 'implies')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ImplyExpression.condition=current}
		public Action getImplyExpressionConditionAction_1_0_0_0() { return cImplyExpressionConditionAction_1_0_0_0; }
		
		//'implies'
		public Keyword getImpliesKeyword_1_0_0_1() { return cImpliesKeyword_1_0_0_1; }
		
		//implied=Expression
		public Assignment getImpliedAssignment_1_1() { return cImpliedAssignment_1_1; }
		
		//Expression
		public RuleCall getImpliedExpressionParserRuleCall_1_1_0() { return cImpliedExpressionParserRuleCall_1_1_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOrExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOrKeyword_1_0_0_1_0 = (Keyword)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_1_1 = (Keyword)cAlternatives_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression (=> ({OrExpression.left=current} ('or' | '||')) right=OrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression (=> ({OrExpression.left=current} ('or' | '||')) right=OrExpression)?
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//(=> ({OrExpression.left=current} ('or' | '||')) right=OrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({OrExpression.left=current} ('or' | '||'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({OrExpression.left=current} ('or' | '||'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0_0_0() { return cOrExpressionLeftAction_1_0_0_0; }
		
		//('or' | '||')
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0_0_1_0() { return cOrKeyword_1_0_0_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_1_1() { return cVerticalLineVerticalLineKeyword_1_0_0_1_1; }
		
		//right=OrExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_1_0() { return cRightOrExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionChildParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAndExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Keyword cAndKeyword_1_0_0_1_0 = (Keyword)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1_1 = (Keyword)cAlternatives_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression Expression:
		//	AndExpressionChild (=> ({AndExpression.left=current} ('and' | '&&')) right=AndExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpressionChild (=> ({AndExpression.left=current} ('and' | '&&')) right=AndExpression)?
		public Group getGroup() { return cGroup; }
		
		//AndExpressionChild
		public RuleCall getAndExpressionChildParserRuleCall_0() { return cAndExpressionChildParserRuleCall_0; }
		
		//(=> ({AndExpression.left=current} ('and' | '&&')) right=AndExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({AndExpression.left=current} ('and' | '&&'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({AndExpression.left=current} ('and' | '&&'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0_0_0() { return cAndExpressionLeftAction_1_0_0_0; }
		
		//('and' | '&&')
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_1_0() { return cAndKeyword_1_0_0_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1_1() { return cAmpersandAmpersandKeyword_1_0_0_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.AndExpressionChild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AndExpressionChild Expression:
		//	NotExpression
		//	| RelationalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression | RelationalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_1() { return cRelationalExpressionParserRuleCall_1; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInnerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerRelationalExpressionParserRuleCall_1_0 = (RuleCall)cInnerAssignment_1.eContents().get(0);
		
		//NotExpression:
		//	'not' inner=RelationalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' inner=RelationalExpression
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//inner=RelationalExpression
		public Assignment getInnerAssignment_1() { return cInnerAssignment_1; }
		
		//RelationalExpression
		public RuleCall getInnerRelationalExpressionParserRuleCall_1_0() { return cInnerRelationalExpressionParserRuleCall_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cRelationalExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorRelationOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpression Expression:
		//	ArithmeticExpression (=> ({RelationalExpression.left=current} operator=RelationOperator) right=ArithmeticExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression (=> ({RelationalExpression.left=current} operator=RelationOperator) right=ArithmeticExpression)?
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//(=> ({RelationalExpression.left=current} operator=RelationOperator) right=ArithmeticExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({RelationalExpression.left=current} operator=RelationOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({RelationalExpression.left=current} operator=RelationOperator)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0_0_0() { return cRelationalExpressionLeftAction_1_0_0_0; }
		
		//operator=RelationOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//RelationOperator
		public RuleCall getOperatorRelationOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorRelationOperatorEnumRuleCall_1_0_0_1_0; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_1_1_0() { return cRightArithmeticExpressionParserRuleCall_1_1_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ArithmeticExpression");
		private final RuleCall cAdditiveExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithmeticExpression Expression:
		//	AdditiveExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall() { return cAdditiveExpressionParserRuleCall; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAdditiveExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		//	right=MultiplicativeExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		//right=MultiplicativeExpression)?
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({AdditiveExpression.left=current} operator=AdditiveOperator) right=MultiplicativeExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({AdditiveExpression.left=current} operator=AdditiveOperator)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0_0_0() { return cAdditiveExpressionLeftAction_1_0_0_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMultiplicativeExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	AtomExpression (=> ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator) right=AtomExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomExpression (=> ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator) right=AtomExpression)?
		public Group getGroup() { return cGroup; }
		
		//AtomExpression
		public RuleCall getAtomExpressionParserRuleCall_0() { return cAtomExpressionParserRuleCall_0; }
		
		//(=> ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator) right=AtomExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({MultiplicativeExpression.left=current} operator=MultiplicativeOperator)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0_0_0() { return cMultiplicativeExpressionLeftAction_1_0_0_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0_1_0; }
		
		//right=AtomExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AtomExpression
		public RuleCall getRightAtomExpressionParserRuleCall_1_1_0() { return cRightAtomExpressionParserRuleCall_1_1_0; }
	}
	public class AtomExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.AtomExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimePredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSlotRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThisExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cQuantifierExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDescriptiveExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGlobalTimeQueryParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTimeConstantParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTimeQueryParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//AtomExpression Expression:
		//	=> ConstantExpression
		//	| TimePredicate
		//	| SlotRef
		//	| ThisExpression
		//	| QuantifierExpression
		//	| DescriptiveExpression
		//	| GlobalTimeQuery
		//	| TimeConstant
		//	| TimeQuery
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//=> ConstantExpression | TimePredicate | SlotRef | ThisExpression | QuantifierExpression | DescriptiveExpression |
		//GlobalTimeQuery | TimeConstant | TimeQuery | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_0() { return cConstantExpressionParserRuleCall_0; }
		
		//TimePredicate
		public RuleCall getTimePredicateParserRuleCall_1() { return cTimePredicateParserRuleCall_1; }
		
		//SlotRef
		public RuleCall getSlotRefParserRuleCall_2() { return cSlotRefParserRuleCall_2; }
		
		//ThisExpression
		public RuleCall getThisExpressionParserRuleCall_3() { return cThisExpressionParserRuleCall_3; }
		
		//QuantifierExpression
		public RuleCall getQuantifierExpressionParserRuleCall_4() { return cQuantifierExpressionParserRuleCall_4; }
		
		//DescriptiveExpression
		public RuleCall getDescriptiveExpressionParserRuleCall_5() { return cDescriptiveExpressionParserRuleCall_5; }
		
		//GlobalTimeQuery
		public RuleCall getGlobalTimeQueryParserRuleCall_6() { return cGlobalTimeQueryParserRuleCall_6; }
		
		//TimeConstant
		public RuleCall getTimeConstantParserRuleCall_7() { return cTimeConstantParserRuleCall_7; }
		
		//TimeQuery
		public RuleCall getTimeQueryParserRuleCall_8() { return cTimeQueryParserRuleCall_8; }
		
		//'(' Expression ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_9_1() { return cExpressionParserRuleCall_9_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
	}
	public class ThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cThisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cHeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSheKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cHisKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cHerKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cHimselfKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cHerselfKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTransitiveTransitiveOperatorEnumRuleCall_2_1_0 = (RuleCall)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cNextAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNextSlotRefParserRuleCall_2_2_0 = (RuleCall)cNextAssignment_2_2.eContents().get(0);
		
		//ThisExpression:
		//	{ThisExpression} ('this' ID? | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
		//	transitive=TransitiveOperator? next=SlotRef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ThisExpression} ('this' ID? | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
		//transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup() { return cGroup; }
		
		//{ThisExpression}
		public Action getThisExpressionAction_0() { return cThisExpressionAction_0; }
		
		//('this' ID? | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'this' ID?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'this'
		public Keyword getThisKeyword_1_0_0() { return cThisKeyword_1_0_0; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }
		
		//'he'
		public Keyword getHeKeyword_1_1() { return cHeKeyword_1_1; }
		
		//'she'
		public Keyword getSheKeyword_1_2() { return cSheKeyword_1_2; }
		
		//'his'
		public Keyword getHisKeyword_1_3() { return cHisKeyword_1_3; }
		
		//'her'
		public Keyword getHerKeyword_1_4() { return cHerKeyword_1_4; }
		
		//'himself'
		public Keyword getHimselfKeyword_1_5() { return cHimselfKeyword_1_5; }
		
		//'herself'
		public Keyword getHerselfKeyword_1_6() { return cHerselfKeyword_1_6; }
		
		//('::' transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//transitive=TransitiveOperator?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//TransitiveOperator
		public RuleCall getTransitiveTransitiveOperatorEnumRuleCall_2_1_0() { return cTransitiveTransitiveOperatorEnumRuleCall_2_1_0; }
		
		//next=SlotRef
		public Assignment getNextAssignment_2_2() { return cNextAssignment_2_2; }
		
		//SlotRef
		public RuleCall getNextSlotRefParserRuleCall_2_2_0() { return cNextSlotRefParserRuleCall_2_2_0; }
	}
	public class SlotRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.SlotRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSlotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSlotDataSlotCrossReference_0_0 = (CrossReference)cSlotAssignment_0.eContents().get(0);
		private final RuleCall cSlotDataSlotIDTerminalRuleCall_0_0_1 = (RuleCall)cSlotDataSlotCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTransitiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTransitiveTransitiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cTransitiveAssignment_1_1.eContents().get(0);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextSlotRefParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		
		//SlotRef:
		//	slot=[DataSlot] ('::' transitive=TransitiveOperator? next=SlotRef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//slot=[DataSlot] ('::' transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup() { return cGroup; }
		
		//slot=[DataSlot]
		public Assignment getSlotAssignment_0() { return cSlotAssignment_0; }
		
		//[DataSlot]
		public CrossReference getSlotDataSlotCrossReference_0_0() { return cSlotDataSlotCrossReference_0_0; }
		
		//ID
		public RuleCall getSlotDataSlotIDTerminalRuleCall_0_0_1() { return cSlotDataSlotIDTerminalRuleCall_0_0_1; }
		
		//('::' transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//transitive=TransitiveOperator?
		public Assignment getTransitiveAssignment_1_1() { return cTransitiveAssignment_1_1; }
		
		//TransitiveOperator
		public RuleCall getTransitiveTransitiveOperatorEnumRuleCall_1_1_0() { return cTransitiveTransitiveOperatorEnumRuleCall_1_1_0; }
		
		//next=SlotRef
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }
		
		//SlotRef
		public RuleCall getNextSlotRefParserRuleCall_1_2_0() { return cNextSlotRefParserRuleCall_1_2_0; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueIntegerParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanconstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBooleanParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFloatConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueFloatParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cValueconstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cValueValueKeyword_4_1_0 = (Keyword)cValueAssignment_4_1.eContents().get(0);
		
		//ConstantExpression Expression:
		//	{IntegerConstant} value=Integer
		//	| {StringConstant} value=STRING
		//	| {Booleanconstant} value=Boolean
		//	| {FloatConstant} value=Float
		//	| {Valueconstant} value="value";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerConstant} value=Integer | {StringConstant} value=STRING | {Booleanconstant} value=Boolean | {FloatConstant}
		//value=Float | {Valueconstant} value="value"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntegerConstant} value=Integer
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntegerConstant}
		public Action getIntegerConstantAction_0_0() { return cIntegerConstantAction_0_0; }
		
		//value=Integer
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_0_1_0() { return cValueIntegerParserRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{Booleanconstant} value=Boolean
		public Group getGroup_2() { return cGroup_2; }
		
		//{Booleanconstant}
		public Action getBooleanconstantAction_2_0() { return cBooleanconstantAction_2_0; }
		
		//value=Boolean
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Boolean
		public RuleCall getValueBooleanParserRuleCall_2_1_0() { return cValueBooleanParserRuleCall_2_1_0; }
		
		//{FloatConstant} value=Float
		public Group getGroup_3() { return cGroup_3; }
		
		//{FloatConstant}
		public Action getFloatConstantAction_3_0() { return cFloatConstantAction_3_0; }
		
		//value=Float
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Float
		public RuleCall getValueFloatParserRuleCall_3_1_0() { return cValueFloatParserRuleCall_3_1_0; }
		
		//{Valueconstant} value="value"
		public Group getGroup_4() { return cGroup_4; }
		
		//{Valueconstant}
		public Action getValueconstantAction_4_0() { return cValueconstantAction_4_0; }
		
		//value="value"
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//"value"
		public Keyword getValueValueKeyword_4_1_0() { return cValueValueKeyword_4_1_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Float ecore::EFloat:
		//	('+' | '-')? (INT '.' INT? | '.' INT);
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-')? (INT '.' INT? | '.' INT)
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//(INT '.' INT? | '.' INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT '.' INT?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1_0_2() { return cINTTerminalRuleCall_1_0_2; }
		
		//'.' INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class TimePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTimePredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoundedTimePredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPeriodicTimePredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimePredicate:
		//	SimpleTimePredicate
		//	| => BoundedTimePredicate
		//	| => PeriodicTimePredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleTimePredicate | => BoundedTimePredicate | => PeriodicTimePredicate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleTimePredicate
		public RuleCall getSimpleTimePredicateParserRuleCall_0() { return cSimpleTimePredicateParserRuleCall_0; }
		
		//=> BoundedTimePredicate
		public RuleCall getBoundedTimePredicateParserRuleCall_1() { return cBoundedTimePredicateParserRuleCall_1; }
		
		//=> PeriodicTimePredicate
		public RuleCall getPeriodicTimePredicateParserRuleCall_2() { return cPeriodicTimePredicateParserRuleCall_2; }
	}
	public class SimpleTimePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.SimpleTimePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorTimePredicateOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		
		//SimpleTimePredicate TimePredicate:
		//	operator=TimePredicateOperator base=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=TimePredicateOperator base=Expression
		public Group getGroup() { return cGroup; }
		
		//operator=TimePredicateOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//TimePredicateOperator
		public RuleCall getOperatorTimePredicateOperatorEnumRuleCall_0_0() { return cOperatorTimePredicateOperatorEnumRuleCall_0_0; }
		
		//base=Expression
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }
		
		//Expression
		public RuleCall getBaseExpressionParserRuleCall_1_0() { return cBaseExpressionParserRuleCall_1_0; }
	}
	public class BoundedTimePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.BoundedTimePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClosedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cClosedWithinKeyword_0_0 = (Keyword)cClosedAssignment_0.eContents().get(0);
		private final Assignment cBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundTimeExpressionParserRuleCall_1_0 = (RuleCall)cBoundAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorTimePredicateOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cBaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseExpressionParserRuleCall_3_0 = (RuleCall)cBaseAssignment_3.eContents().get(0);
		
		////边界时间谓词
		//BoundedTimePredicate:
		//	closed?='within'? bound=TimeExpression operator=TimePredicateOperator base=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//closed?='within'? bound=TimeExpression operator=TimePredicateOperator base=Expression
		public Group getGroup() { return cGroup; }
		
		//closed?='within'?
		public Assignment getClosedAssignment_0() { return cClosedAssignment_0; }
		
		//'within'
		public Keyword getClosedWithinKeyword_0_0() { return cClosedWithinKeyword_0_0; }
		
		//bound=TimeExpression
		public Assignment getBoundAssignment_1() { return cBoundAssignment_1; }
		
		//TimeExpression
		public RuleCall getBoundTimeExpressionParserRuleCall_1_0() { return cBoundTimeExpressionParserRuleCall_1_0; }
		
		//operator=TimePredicateOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//TimePredicateOperator
		public RuleCall getOperatorTimePredicateOperatorEnumRuleCall_2_0() { return cOperatorTimePredicateOperatorEnumRuleCall_2_0; }
		
		//base=Expression
		public Assignment getBaseAssignment_3() { return cBaseAssignment_3; }
		
		//Expression
		public RuleCall getBaseExpressionParserRuleCall_3_0() { return cBaseExpressionParserRuleCall_3_0; }
	}
	public class PeriodicTimePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.PeriodicTimePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorTimePredicateOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cPeriodDateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPeriodDateTimeConstantParserRuleCall_1_1_0 = (RuleCall)cPeriodDateAssignment_1_1.eContents().get(0);
		private final Keyword cEveryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseTimeConstantParserRuleCall_3_0 = (RuleCall)cBaseAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cInKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cPeriodAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cPeriodTimeExpressionParserRuleCall_4_0_1_0 = (RuleCall)cPeriodAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cFromKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cBasefromAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cBasefromExpressionParserRuleCall_4_1_1_0 = (RuleCall)cBasefromAssignment_4_1_1.eContents().get(0);
		private final Keyword cToKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cBasetoAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cBasetoExpressionParserRuleCall_4_1_3_0 = (RuleCall)cBasetoAssignment_4_1_3.eContents().get(0);
		
		////周期时间谓词
		//PeriodicTimePredicate:
		//	'by' (operator=TimePredicateOperator periodDate=TimeConstant)? 'every' base=TimeConstant ('in' period=TimeExpression |
		//	'from' basefrom=Expression 'to' baseto=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'by' (operator=TimePredicateOperator periodDate=TimeConstant)? 'every' base=TimeConstant ('in' period=TimeExpression |
		//'from' basefrom=Expression 'to' baseto=Expression)?
		public Group getGroup() { return cGroup; }
		
		//'by'
		public Keyword getByKeyword_0() { return cByKeyword_0; }
		
		//(operator=TimePredicateOperator periodDate=TimeConstant)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=TimePredicateOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//TimePredicateOperator
		public RuleCall getOperatorTimePredicateOperatorEnumRuleCall_1_0_0() { return cOperatorTimePredicateOperatorEnumRuleCall_1_0_0; }
		
		//periodDate=TimeConstant
		public Assignment getPeriodDateAssignment_1_1() { return cPeriodDateAssignment_1_1; }
		
		//TimeConstant
		public RuleCall getPeriodDateTimeConstantParserRuleCall_1_1_0() { return cPeriodDateTimeConstantParserRuleCall_1_1_0; }
		
		//'every'
		public Keyword getEveryKeyword_2() { return cEveryKeyword_2; }
		
		//base=TimeConstant
		public Assignment getBaseAssignment_3() { return cBaseAssignment_3; }
		
		//TimeConstant
		public RuleCall getBaseTimeConstantParserRuleCall_3_0() { return cBaseTimeConstantParserRuleCall_3_0; }
		
		//('in' period=TimeExpression | 'from' basefrom=Expression 'to' baseto=Expression)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'in' period=TimeExpression
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'in'
		public Keyword getInKeyword_4_0_0() { return cInKeyword_4_0_0; }
		
		//period=TimeExpression
		public Assignment getPeriodAssignment_4_0_1() { return cPeriodAssignment_4_0_1; }
		
		//TimeExpression
		public RuleCall getPeriodTimeExpressionParserRuleCall_4_0_1_0() { return cPeriodTimeExpressionParserRuleCall_4_0_1_0; }
		
		//'from' basefrom=Expression 'to' baseto=Expression
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'from'
		public Keyword getFromKeyword_4_1_0() { return cFromKeyword_4_1_0; }
		
		//basefrom=Expression
		public Assignment getBasefromAssignment_4_1_1() { return cBasefromAssignment_4_1_1; }
		
		//Expression
		public RuleCall getBasefromExpressionParserRuleCall_4_1_1_0() { return cBasefromExpressionParserRuleCall_4_1_1_0; }
		
		//'to'
		public Keyword getToKeyword_4_1_2() { return cToKeyword_4_1_2; }
		
		//baseto=Expression
		public Assignment getBasetoAssignment_4_1_3() { return cBasetoAssignment_4_1_3; }
		
		//Expression
		public RuleCall getBasetoExpressionParserRuleCall_4_1_3_0() { return cBasetoExpressionParserRuleCall_4_1_3_0; }
	}
	public class TimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimeQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeVarExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeThisExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TimeExpression:
		//	=> TimeLine
		//	| TimeConstant
		//	| TimeQuery
		//	| TimeVarExpression
		//	| TimeThisExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> TimeLine | TimeConstant | TimeQuery | TimeVarExpression | TimeThisExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> TimeLine
		public RuleCall getTimeLineParserRuleCall_0() { return cTimeLineParserRuleCall_0; }
		
		//TimeConstant
		public RuleCall getTimeConstantParserRuleCall_1() { return cTimeConstantParserRuleCall_1; }
		
		//TimeQuery
		public RuleCall getTimeQueryParserRuleCall_2() { return cTimeQueryParserRuleCall_2; }
		
		//TimeVarExpression
		public RuleCall getTimeVarExpressionParserRuleCall_3() { return cTimeVarExpressionParserRuleCall_3; }
		
		//TimeThisExpression
		public RuleCall getTimeThisExpressionParserRuleCall_4() { return cTimeThisExpressionParserRuleCall_4; }
	}
	public class TimeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionEnforcedTimeQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTermValidTimeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGlobalTimeQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimeQuery:
		//	ActionEnforcedTimeQuery
		//	| TermValidTimeQuery
		//	| GlobalTimeQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionEnforcedTimeQuery | TermValidTimeQuery | GlobalTimeQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionEnforcedTimeQuery
		public RuleCall getActionEnforcedTimeQueryParserRuleCall_0() { return cActionEnforcedTimeQueryParserRuleCall_0; }
		
		//TermValidTimeQuery
		public RuleCall getTermValidTimeQueryParserRuleCall_1() { return cTermValidTimeQueryParserRuleCall_1; }
		
		//GlobalTimeQuery
		public RuleCall getGlobalTimeQueryParserRuleCall_2() { return cGlobalTimeQueryParserRuleCall_2; }
	}
	public class ActionEnforcedTimeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ActionEnforcedTimeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicityActionMultiplicityEnumRuleCall_0_0 = (RuleCall)cMultiplicityAssignment_0.eContents().get(0);
		private final Assignment cPartyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartyPartyCrossReference_1_0 = (CrossReference)cPartyAssignment_1.eContents().get(0);
		private final RuleCall cPartyPartyIDTerminalRuleCall_1_0_1 = (RuleCall)cPartyPartyCrossReference_1_0.eContents().get(1);
		private final Keyword cDidKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionActionCrossReference_3_0 = (CrossReference)cActionAssignment_3.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_3_0_1 = (RuleCall)cActionActionCrossReference_3_0.eContents().get(1);
		
		//ActionEnforcedTimeQuery:
		//	multiplicity=ActionMultiplicity? party=[Party] 'did' action=[Action];
		@Override public ParserRule getRule() { return rule; }
		
		//multiplicity=ActionMultiplicity? party=[Party] 'did' action=[Action]
		public Group getGroup() { return cGroup; }
		
		//multiplicity=ActionMultiplicity?
		public Assignment getMultiplicityAssignment_0() { return cMultiplicityAssignment_0; }
		
		//ActionMultiplicity
		public RuleCall getMultiplicityActionMultiplicityEnumRuleCall_0_0() { return cMultiplicityActionMultiplicityEnumRuleCall_0_0; }
		
		//party=[Party]
		public Assignment getPartyAssignment_1() { return cPartyAssignment_1; }
		
		//[Party]
		public CrossReference getPartyPartyCrossReference_1_0() { return cPartyPartyCrossReference_1_0; }
		
		//ID
		public RuleCall getPartyPartyIDTerminalRuleCall_1_0_1() { return cPartyPartyIDTerminalRuleCall_1_0_1; }
		
		//'did'
		public Keyword getDidKeyword_2() { return cDidKeyword_2; }
		
		//action=[Action]
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_3_0() { return cActionActionCrossReference_3_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_3_0_1() { return cActionActionIDTerminalRuleCall_3_0_1; }
	}
	public class TermValidTimeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TermValidTimeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTermTermCrossReference_0_0 = (CrossReference)cTermAssignment_0.eContents().get(0);
		private final RuleCall cTermTermIDTerminalRuleCall_0_0_1 = (RuleCall)cTermTermCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValidKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TermValidTimeQuery:
		//	term=[Term] 'is' 'valid';
		@Override public ParserRule getRule() { return rule; }
		
		//term=[Term] 'is' 'valid'
		public Group getGroup() { return cGroup; }
		
		//term=[Term]
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }
		
		//[Term]
		public CrossReference getTermTermCrossReference_0_0() { return cTermTermCrossReference_0_0; }
		
		//ID
		public RuleCall getTermTermIDTerminalRuleCall_0_0_1() { return cTermTermIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'valid'
		public Keyword getValidKeyword_2() { return cValidKeyword_2; }
	}
	public class GlobalTimeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.GlobalTimeQuery");
		private final Assignment cOperatorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperatorTimeQueryOperatorEnumRuleCall_0 = (RuleCall)cOperatorAssignment.eContents().get(0);
		
		//GlobalTimeQuery:
		//	operator=TimeQueryOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=TimeQueryOperator
		public Assignment getOperatorAssignment() { return cOperatorAssignment; }
		
		//TimeQueryOperator
		public RuleCall getOperatorTimeQueryOperatorEnumRuleCall_0() { return cOperatorTimeQueryOperatorEnumRuleCall_0; }
	}
	public class TimeLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseTimeLineChildParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorTimeLineOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cDeviationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeviationTimeLineChildParserRuleCall_2_0 = (RuleCall)cDeviationAssignment_2.eContents().get(0);
		
		//TimeLine:
		//	base=TimeLineChild operator=TimeLineOperator deviation=TimeLineChild;
		@Override public ParserRule getRule() { return rule; }
		
		//base=TimeLineChild operator=TimeLineOperator deviation=TimeLineChild
		public Group getGroup() { return cGroup; }
		
		//base=TimeLineChild
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }
		
		//TimeLineChild
		public RuleCall getBaseTimeLineChildParserRuleCall_0_0() { return cBaseTimeLineChildParserRuleCall_0_0; }
		
		//operator=TimeLineOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//TimeLineOperator
		public RuleCall getOperatorTimeLineOperatorEnumRuleCall_1_0() { return cOperatorTimeLineOperatorEnumRuleCall_1_0; }
		
		//deviation=TimeLineChild
		public Assignment getDeviationAssignment_2() { return cDeviationAssignment_2; }
		
		//TimeLineChild
		public RuleCall getDeviationTimeLineChildParserRuleCall_2_0() { return cDeviationTimeLineChildParserRuleCall_2_0; }
	}
	public class TimeLineChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeLineChild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TimeLineChild TimeExpression:
		//	TimeConstant
		//	| TimeQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeConstant | TimeQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeConstant
		public RuleCall getTimeConstantParserRuleCall_0() { return cTimeConstantParserRuleCall_0; }
		
		//TimeQuery
		public RuleCall getTimeQueryParserRuleCall_1() { return cTimeQueryParserRuleCall_1; }
	}
	public class TimeConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cYearAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_1_0_0 = (RuleCall)cYearAssignment_1_0.eContents().get(0);
		private final Keyword cYearKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMonthINTTerminalRuleCall_2_0_0 = (RuleCall)cMonthAssignment_2_0.eContents().get(0);
		private final Keyword cMonthKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDayINTTerminalRuleCall_3_0_0 = (RuleCall)cDayAssignment_3_0.eContents().get(0);
		private final Keyword cDayKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cHourAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_4_0_0 = (RuleCall)cHourAssignment_4_0.eContents().get(0);
		private final Keyword cHourKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMinAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMinINTTerminalRuleCall_5_0_0 = (RuleCall)cMinAssignment_5_0.eContents().get(0);
		private final Keyword cMinKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cSecAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cSecINTTerminalRuleCall_6_0_0 = (RuleCall)cSecAssignment_6_0.eContents().get(0);
		private final Keyword cSecKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cDateAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cDateINTTerminalRuleCall_7_0_0 = (RuleCall)cDateAssignment_7_0.eContents().get(0);
		private final Keyword cThKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//TimeConstant:
		//	{TimeConstant} (year=INT 'year')? (month=INT 'month')? (day=INT 'day')? (hour=INT 'hour')? (min=INT 'min')? (sec=INT
		//	'sec')? (date=INT 'th')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeConstant} (year=INT 'year')? (month=INT 'month')? (day=INT 'day')? (hour=INT 'hour')? (min=INT 'min')? (sec=INT
		//'sec')? (date=INT 'th')?
		public Group getGroup() { return cGroup; }
		
		//{TimeConstant}
		public Action getTimeConstantAction_0() { return cTimeConstantAction_0; }
		
		//(year=INT 'year')?
		public Group getGroup_1() { return cGroup_1; }
		
		//year=INT
		public Assignment getYearAssignment_1_0() { return cYearAssignment_1_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_1_0_0() { return cYearINTTerminalRuleCall_1_0_0; }
		
		//'year'
		public Keyword getYearKeyword_1_1() { return cYearKeyword_1_1; }
		
		//(month=INT 'month')?
		public Group getGroup_2() { return cGroup_2; }
		
		//month=INT
		public Assignment getMonthAssignment_2_0() { return cMonthAssignment_2_0; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_2_0_0() { return cMonthINTTerminalRuleCall_2_0_0; }
		
		//'month'
		public Keyword getMonthKeyword_2_1() { return cMonthKeyword_2_1; }
		
		//(day=INT 'day')?
		public Group getGroup_3() { return cGroup_3; }
		
		//day=INT
		public Assignment getDayAssignment_3_0() { return cDayAssignment_3_0; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_3_0_0() { return cDayINTTerminalRuleCall_3_0_0; }
		
		//'day'
		public Keyword getDayKeyword_3_1() { return cDayKeyword_3_1; }
		
		//(hour=INT 'hour')?
		public Group getGroup_4() { return cGroup_4; }
		
		//hour=INT
		public Assignment getHourAssignment_4_0() { return cHourAssignment_4_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_4_0_0() { return cHourINTTerminalRuleCall_4_0_0; }
		
		//'hour'
		public Keyword getHourKeyword_4_1() { return cHourKeyword_4_1; }
		
		//(min=INT 'min')?
		public Group getGroup_5() { return cGroup_5; }
		
		//min=INT
		public Assignment getMinAssignment_5_0() { return cMinAssignment_5_0; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_5_0_0() { return cMinINTTerminalRuleCall_5_0_0; }
		
		//'min'
		public Keyword getMinKeyword_5_1() { return cMinKeyword_5_1; }
		
		//(sec=INT 'sec')?
		public Group getGroup_6() { return cGroup_6; }
		
		//sec=INT
		public Assignment getSecAssignment_6_0() { return cSecAssignment_6_0; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_6_0_0() { return cSecINTTerminalRuleCall_6_0_0; }
		
		//'sec'
		public Keyword getSecKeyword_6_1() { return cSecKeyword_6_1; }
		
		//(date=INT 'th')?
		public Group getGroup_7() { return cGroup_7; }
		
		//date=INT
		public Assignment getDateAssignment_7_0() { return cDateAssignment_7_0; }
		
		//INT
		public RuleCall getDateINTTerminalRuleCall_7_0_0() { return cDateINTTerminalRuleCall_7_0_0; }
		
		//'th'
		public Keyword getThKeyword_7_1() { return cThKeyword_7_1; }
	}
	public class TimeVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeVarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSlotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSlotDataSlotCrossReference_1_0 = (CrossReference)cSlotAssignment_1.eContents().get(0);
		private final RuleCall cSlotDataSlotIDTerminalRuleCall_1_0_1 = (RuleCall)cSlotDataSlotCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextSlotRefParserRuleCall_2_1_0 = (RuleCall)cNextAssignment_2_1.eContents().get(0);
		
		//TimeVarExpression:
		//	'@' slot=[DataSlot] ('::' next=SlotRef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' slot=[DataSlot] ('::' next=SlotRef)?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//slot=[DataSlot]
		public Assignment getSlotAssignment_1() { return cSlotAssignment_1; }
		
		//[DataSlot]
		public CrossReference getSlotDataSlotCrossReference_1_0() { return cSlotDataSlotCrossReference_1_0; }
		
		//ID
		public RuleCall getSlotDataSlotIDTerminalRuleCall_1_0_1() { return cSlotDataSlotIDTerminalRuleCall_1_0_1; }
		
		//('::' next=SlotRef)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//next=SlotRef
		public Assignment getNextAssignment_2_1() { return cNextAssignment_2_1; }
		
		//SlotRef
		public RuleCall getNextSlotRefParserRuleCall_2_1_0() { return cNextSlotRefParserRuleCall_2_1_0; }
	}
	public class TimeThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cThisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cHeKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cSheKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cHisKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cHerKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Keyword cHimselfKeyword_2_5 = (Keyword)cAlternatives_2.eContents().get(5);
		private final Keyword cHerselfKeyword_2_6 = (Keyword)cAlternatives_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTransitiveAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTransitiveTransitiveOperatorEnumRuleCall_3_1_0 = (RuleCall)cTransitiveAssignment_3_1.eContents().get(0);
		private final Assignment cNextAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNextSlotRefParserRuleCall_3_2_0 = (RuleCall)cNextAssignment_3_2.eContents().get(0);
		
		//TimeThisExpression ThisExpression:
		//	{ThisExpression} '@' ('this' ID | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
		//	transitive=TransitiveOperator? next=SlotRef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ThisExpression} '@' ('this' ID | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
		//transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup() { return cGroup; }
		
		//{ThisExpression}
		public Action getThisExpressionAction_0() { return cThisExpressionAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//('this' ID | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'this' ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'this'
		public Keyword getThisKeyword_2_0_0() { return cThisKeyword_2_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0_1() { return cIDTerminalRuleCall_2_0_1; }
		
		//'he'
		public Keyword getHeKeyword_2_1() { return cHeKeyword_2_1; }
		
		//'she'
		public Keyword getSheKeyword_2_2() { return cSheKeyword_2_2; }
		
		//'his'
		public Keyword getHisKeyword_2_3() { return cHisKeyword_2_3; }
		
		//'her'
		public Keyword getHerKeyword_2_4() { return cHerKeyword_2_4; }
		
		//'himself'
		public Keyword getHimselfKeyword_2_5() { return cHimselfKeyword_2_5; }
		
		//'herself'
		public Keyword getHerselfKeyword_2_6() { return cHerselfKeyword_2_6; }
		
		//('::' transitive=TransitiveOperator? next=SlotRef)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//transitive=TransitiveOperator?
		public Assignment getTransitiveAssignment_3_1() { return cTransitiveAssignment_3_1; }
		
		//TransitiveOperator
		public RuleCall getTransitiveTransitiveOperatorEnumRuleCall_3_1_0() { return cTransitiveTransitiveOperatorEnumRuleCall_3_1_0; }
		
		//next=SlotRef
		public Assignment getNextAssignment_3_2() { return cNextAssignment_3_2; }
		
		//SlotRef
		public RuleCall getNextSlotRefParserRuleCall_3_2_0() { return cNextSlotRefParserRuleCall_3_2_0; }
	}
	
	public class QuantifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForAllEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForAllAllKeyword_0_0 = (Keyword)cForAllEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cForAllEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cForAllForAllKeyword_1_0 = (Keyword)cForAllEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExistsSomeKeyword_2_0 = (Keyword)cExistsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cExistsExistsKeyword_3_0 = (Keyword)cExistsEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Quantifier:
		//	forAll='all' | forAll | exists='some' | exists;
		public EnumRule getRule() { return rule; }
		
		//forAll='all' | forAll | exists='some' | exists
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forAll='all'
		public EnumLiteralDeclaration getForAllEnumLiteralDeclaration_0() { return cForAllEnumLiteralDeclaration_0; }
		
		//'all'
		public Keyword getForAllAllKeyword_0_0() { return cForAllAllKeyword_0_0; }
		
		//forAll
		public EnumLiteralDeclaration getForAllEnumLiteralDeclaration_1() { return cForAllEnumLiteralDeclaration_1; }
		
		//'forAll'
		public Keyword getForAllForAllKeyword_1_0() { return cForAllForAllKeyword_1_0; }
		
		//exists='some'
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_2() { return cExistsEnumLiteralDeclaration_2; }
		
		//'some'
		public Keyword getExistsSomeKeyword_2_0() { return cExistsSomeKeyword_2_0; }
		
		//exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_3() { return cExistsEnumLiteralDeclaration_3; }
		
		//'exists'
		public Keyword getExistsExistsKeyword_3_0() { return cExistsExistsKeyword_3_0; }
	}
	public class RelationOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.RelationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualIsKeyword_1_0 = (Keyword)cEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessLessThanSignKeyword_2_0 = (Keyword)cLessEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessOrEqualLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessOrEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterGreaterThanSignKeyword_4_0 = (Keyword)cGreaterEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGreaterOrEqualGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGreaterOrEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_6_0 = (Keyword)cNotEqualEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNotEqualLessThanSignGreaterThanSignKeyword_7_0 = (Keyword)cNotEqualEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotEqualIsnTKeyword_8_0 = (Keyword)cNotEqualEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum RelationOperator returns RelationalOperator:
		//	equal='=' | equal='is' | less='<' | lessOrEqual='<=' | greater='>' | greaterOrEqual='>=' | notEqual='!=' |
		//	notEqual='<>' | notEqual='isn\'t';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | equal='is' | less='<' | lessOrEqual='<=' | greater='>' | greaterOrEqual='>=' | notEqual='!=' | notEqual='<>'
		//| notEqual='isn\'t'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//equal='is'
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_1() { return cEqualEnumLiteralDeclaration_1; }
		
		//'is'
		public Keyword getEqualIsKeyword_1_0() { return cEqualIsKeyword_1_0; }
		
		//less='<'
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_2() { return cLessEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLessLessThanSignKeyword_2_0() { return cLessLessThanSignKeyword_2_0; }
		
		//lessOrEqual='<='
		public EnumLiteralDeclaration getLessOrEqualEnumLiteralDeclaration_3() { return cLessOrEqualEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLessOrEqualLessThanSignEqualsSignKeyword_3_0() { return cLessOrEqualLessThanSignEqualsSignKeyword_3_0; }
		
		//greater='>'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_4() { return cGreaterEnumLiteralDeclaration_4; }
		
		//'>'
		public Keyword getGreaterGreaterThanSignKeyword_4_0() { return cGreaterGreaterThanSignKeyword_4_0; }
		
		//greaterOrEqual='>='
		public EnumLiteralDeclaration getGreaterOrEqualEnumLiteralDeclaration_5() { return cGreaterOrEqualEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGreaterOrEqualGreaterThanSignEqualsSignKeyword_5_0() { return cGreaterOrEqualGreaterThanSignEqualsSignKeyword_5_0; }
		
		//notEqual='!='
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_6() { return cNotEqualEnumLiteralDeclaration_6; }
		
		//'!='
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_6_0() { return cNotEqualExclamationMarkEqualsSignKeyword_6_0; }
		
		//notEqual='<>'
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_7() { return cNotEqualEnumLiteralDeclaration_7; }
		
		//'<>'
		public Keyword getNotEqualLessThanSignGreaterThanSignKeyword_7_0() { return cNotEqualLessThanSignGreaterThanSignKeyword_7_0; }
		
		//notEqual='isn\'t'
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_8() { return cNotEqualEnumLiteralDeclaration_8; }
		
		//'isn\'t'
		public Keyword getNotEqualIsnTKeyword_8_0() { return cNotEqualIsnTKeyword_8_0; }
	}
	public class AdditiveOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubHyphenMinusKeyword_1_0 = (Keyword)cSubEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	add='+' | sub='-';
		public EnumRule getRule() { return rule; }
		
		//add='+' | sub='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//add='+'
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }
		
		//sub='-'
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_1() { return cSubEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSubHyphenMinusKeyword_1_0() { return cSubHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	mul='*' | div='/';
		public EnumRule getRule() { return rule; }
		
		//mul='*' | div='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mul='*'
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }
		
		//div='/'
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }
	}
	public class TransitiveOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TransitiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTransitiveEnclosureEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTransitiveEnclosureCircumflexAccentKeyword_0_0 = (Keyword)cTransitiveEnclosureEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSelfTransitiveEnclosureEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSelfTransitiveEnclosureAsteriskKeyword_1_0 = (Keyword)cSelfTransitiveEnclosureEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TransitiveOperator:
		//	transitiveEnclosure='^' | selfTransitiveEnclosure='*';
		public EnumRule getRule() { return rule; }
		
		//transitiveEnclosure='^' | selfTransitiveEnclosure='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//transitiveEnclosure='^'
		public EnumLiteralDeclaration getTransitiveEnclosureEnumLiteralDeclaration_0() { return cTransitiveEnclosureEnumLiteralDeclaration_0; }
		
		//'^'
		public Keyword getTransitiveEnclosureCircumflexAccentKeyword_0_0() { return cTransitiveEnclosureCircumflexAccentKeyword_0_0; }
		
		//selfTransitiveEnclosure='*'
		public EnumLiteralDeclaration getSelfTransitiveEnclosureEnumLiteralDeclaration_1() { return cSelfTransitiveEnclosureEnumLiteralDeclaration_1; }
		
		//'*'
		public Keyword getSelfTransitiveEnclosureAsteriskKeyword_1_0() { return cSelfTransitiveEnclosureAsteriskKeyword_1_0; }
	}
	public class TimePredicateOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimePredicateOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBeforeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_0_0 = (Keyword)cBeforeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAfterAfterKeyword_1_0 = (Keyword)cAfterEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimePredicateOperator:
		//	before | after;
		public EnumRule getRule() { return rule; }
		
		//before | after
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//before
		public EnumLiteralDeclaration getBeforeEnumLiteralDeclaration_0() { return cBeforeEnumLiteralDeclaration_0; }
		
		//'before'
		public Keyword getBeforeBeforeKeyword_0_0() { return cBeforeBeforeKeyword_0_0; }
		
		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_1() { return cAfterEnumLiteralDeclaration_1; }
		
		//'after'
		public Keyword getAfterAfterKeyword_1_0() { return cAfterAfterKeyword_1_0; }
	}
	public class ActionMultiplicityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.ActionMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAllAllKeyword_0_0 = (Keyword)cAllEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnySomeKeyword_2_0 = (Keyword)cAnyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAnyOneKeyword_3_0 = (Keyword)cAnyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cThisEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cThisThisKeyword_4_0 = (Keyword)cThisEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cThisEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cThisTheKeyword_5_0 = (Keyword)cThisEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ActionMultiplicity returns PartyMemberMultiplicity:
		//	all | any | any="some" | any="one" | this | this="the";
		public EnumRule getRule() { return rule; }
		
		//all | any | any="some" | any="one" | this | this="the"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_0() { return cAllEnumLiteralDeclaration_0; }
		
		//'all'
		public Keyword getAllAllKeyword_0_0() { return cAllAllKeyword_0_0; }
		
		//any
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }
		
		//"any"
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
		
		//any="some"
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_2() { return cAnyEnumLiteralDeclaration_2; }
		
		//"some"
		public Keyword getAnySomeKeyword_2_0() { return cAnySomeKeyword_2_0; }
		
		//any="one"
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_3() { return cAnyEnumLiteralDeclaration_3; }
		
		//"one"
		public Keyword getAnyOneKeyword_3_0() { return cAnyOneKeyword_3_0; }
		
		//this
		public EnumLiteralDeclaration getThisEnumLiteralDeclaration_4() { return cThisEnumLiteralDeclaration_4; }
		
		//'this'
		public Keyword getThisThisKeyword_4_0() { return cThisThisKeyword_4_0; }
		
		//this="the"
		public EnumLiteralDeclaration getThisEnumLiteralDeclaration_5() { return cThisEnumLiteralDeclaration_5; }
		
		//"the"
		public Keyword getThisTheKeyword_5_0() { return cThisTheKeyword_5_0; }
	}
	public class TimeLineOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeLineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardPlusSignKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardHyphenMinusKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimeLineOperator:
		//	forward='+' | backward='-';
		public EnumRule getRule() { return rule; }
		
		//forward='+' | backward='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward='+'
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getForwardPlusSignKeyword_0_0() { return cForwardPlusSignKeyword_0_0; }
		
		//backward='-'
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getBackwardHyphenMinusKeyword_1_0() { return cBackwardHyphenMinusKeyword_1_0; }
	}
	public class TimeQueryOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.TimeQueryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNowEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNowNowKeyword_0_0 = (Keyword)cNowEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContractStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContractStartStartKeyword_1_0 = (Keyword)cContractStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cContractEndEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cContractEndEndKeyword_2_0 = (Keyword)cContractEndEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeQueryOperator:
		//	now | contractStart='start' | contractEnd='end';
		public EnumRule getRule() { return rule; }
		
		//now | contractStart='start' | contractEnd='end'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//now
		public EnumLiteralDeclaration getNowEnumLiteralDeclaration_0() { return cNowEnumLiteralDeclaration_0; }
		
		//'now'
		public Keyword getNowNowKeyword_0_0() { return cNowNowKeyword_0_0; }
		
		//contractStart='start'
		public EnumLiteralDeclaration getContractStartEnumLiteralDeclaration_1() { return cContractStartEnumLiteralDeclaration_1; }
		
		//'start'
		public Keyword getContractStartStartKeyword_1_0() { return cContractStartStartKeyword_1_0; }
		
		//contractEnd='end'
		public EnumLiteralDeclaration getContractEndEnumLiteralDeclaration_2() { return cContractEndEnumLiteralDeclaration_2; }
		
		//'end'
		public Keyword getContractEndEndKeyword_2_0() { return cContractEndEndKeyword_2_0; }
	}
	
	private final ContractElements pContract;
	private final ComplexTypeElements pComplexType;
	private final AssetElements pAsset;
	private final EnumTypeElements pEnumType;
	private final SelectionElements pSelection;
	private final FieldElements pField;
	private final PartyElements pParty;
	private final ActionElements pAction;
	private final TermElements pTerm;
	private final TransferOperationElements pTransferOperation;
	private final MoneyExpressionElements pMoneyExpression;
	private final ExpressionElements pExpression;
	private final DescriptiveExpressionElements pDescriptiveExpression;
	private final CollectionSourceExpressionElements pCollectionSourceExpression;
	private final IteratorDeclExpressionElements pIteratorDeclExpression;
	private final QuantifierExpressionElements pQuantifierExpression;
	private final QuantifierElements eQuantifier;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ImplyExpressionElements pImplyExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final AndExpressionChildElements pAndExpressionChild;
	private final NotExpressionElements pNotExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationOperatorElements eRelationOperator;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements eAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements eMultiplicativeOperator;
	private final AtomExpressionElements pAtomExpression;
	private final ThisExpressionElements pThisExpression;
	private final SlotRefElements pSlotRef;
	private final TransitiveOperatorElements eTransitiveOperator;
	private final ConstantExpressionElements pConstantExpression;
	private final FloatElements pFloat;
	private final IntegerElements pInteger;
	private final BooleanElements pBoolean;
	private final TimePredicateElements pTimePredicate;
	private final SimpleTimePredicateElements pSimpleTimePredicate;
	private final BoundedTimePredicateElements pBoundedTimePredicate;
	private final PeriodicTimePredicateElements pPeriodicTimePredicate;
	private final TimePredicateOperatorElements eTimePredicateOperator;
	private final TimeExpressionElements pTimeExpression;
	private final TimeQueryElements pTimeQuery;
	private final ActionEnforcedTimeQueryElements pActionEnforcedTimeQuery;
	private final ActionMultiplicityElements eActionMultiplicity;
	private final TermValidTimeQueryElements pTermValidTimeQuery;
	private final GlobalTimeQueryElements pGlobalTimeQuery;
	private final TimeLineElements pTimeLine;
	private final TimeLineChildElements pTimeLineChild;
	private final TimeLineOperatorElements eTimeLineOperator;
	private final TimeQueryOperatorElements eTimeQueryOperator;
	private final TimeConstantElements pTimeConstant;
	private final TimeVarExpressionElements pTimeVarExpression;
	private final TimeThisExpressionElements pTimeThisExpression;
	private final TerminalRule tSLD;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tPLAINTEXT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmartContractSpecificationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContract = new ContractElements();
		this.pComplexType = new ComplexTypeElements();
		this.pAsset = new AssetElements();
		this.pEnumType = new EnumTypeElements();
		this.pSelection = new SelectionElements();
		this.pField = new FieldElements();
		this.pParty = new PartyElements();
		this.pAction = new ActionElements();
		this.pTerm = new TermElements();
		this.pTransferOperation = new TransferOperationElements();
		this.pMoneyExpression = new MoneyExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pDescriptiveExpression = new DescriptiveExpressionElements();
		this.pCollectionSourceExpression = new CollectionSourceExpressionElements();
		this.pIteratorDeclExpression = new IteratorDeclExpressionElements();
		this.pQuantifierExpression = new QuantifierExpressionElements();
		this.eQuantifier = new QuantifierElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pImplyExpression = new ImplyExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAndExpressionChild = new AndExpressionChildElements();
		this.pNotExpression = new NotExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.eRelationOperator = new RelationOperatorElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.eAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.eMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pAtomExpression = new AtomExpressionElements();
		this.pThisExpression = new ThisExpressionElements();
		this.pSlotRef = new SlotRefElements();
		this.eTransitiveOperator = new TransitiveOperatorElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pFloat = new FloatElements();
		this.pInteger = new IntegerElements();
		this.pBoolean = new BooleanElements();
		this.pTimePredicate = new TimePredicateElements();
		this.pSimpleTimePredicate = new SimpleTimePredicateElements();
		this.pBoundedTimePredicate = new BoundedTimePredicateElements();
		this.pPeriodicTimePredicate = new PeriodicTimePredicateElements();
		this.eTimePredicateOperator = new TimePredicateOperatorElements();
		this.pTimeExpression = new TimeExpressionElements();
		this.pTimeQuery = new TimeQueryElements();
		this.pActionEnforcedTimeQuery = new ActionEnforcedTimeQueryElements();
		this.eActionMultiplicity = new ActionMultiplicityElements();
		this.pTermValidTimeQuery = new TermValidTimeQueryElements();
		this.pGlobalTimeQuery = new GlobalTimeQueryElements();
		this.pTimeLine = new TimeLineElements();
		this.pTimeLineChild = new TimeLineChildElements();
		this.eTimeLineOperator = new TimeLineOperatorElements();
		this.eTimeQueryOperator = new TimeQueryOperatorElements();
		this.pTimeConstant = new TimeConstantElements();
		this.pTimeVarExpression = new TimeVarExpressionElements();
		this.pTimeThisExpression = new TimeThisExpressionElements();
		this.tSLD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.SLD");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.SL_COMMENT");
		this.tPLAINTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.SmartContractSpecification.PLAINTEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ustb.sei.mde.SmartContractSpecification".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Contract:
	//	'contract'
	//	name=ID
	//	'{'
	//	parties+=Party+
	//	fields+=Field* (terms+=Term '.')*
	//	types+=ComplexType*
	//	assets+=Asset*
	//	'}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//ComplexType:
	//	'type' name=ID '{' fields+=Field* '}';
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}
	
	//Asset:
	//	'asset' name=ID '{'
	//	'info' '{'
	//	fields+=Field*
	//	'}'
	//	'right' '{'
	//	fields+=Field*
	//	'}'
	//	'}';
	public AssetElements getAssetAccess() {
		return pAsset;
	}
	
	public ParserRule getAssetRule() {
		return getAssetAccess().getRule();
	}
	
	//enumType:
	//	'enum' name=ID '{' selections+=Selection (',' selections+=Selection)* '}';
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//Selection:
	//	name=ID;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//Field:
	//	name=ID ':' many?='set'? type=[Type] SLD?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Party:
	//	{SingleParty} 'party' name=ID '{' fields+=Field* actions+=Action* '}'
	//	| {GroupParty} 'party' 'group' name=ID '{' fields+=Field* actions+=Action* '}'
	//	| {ExternalParty} 'external' 'party' name=ID '{' (actions+=Action (',' actions+=Action)*)? '}';
	public PartyElements getPartyAccess() {
		return pParty;
	}
	
	public ParserRule getPartyRule() {
		return getPartyAccess().getRule();
	}
	
	//Action:
	//	name=ID '(' (parameters+=Field (',' parameters+=Field)*)? ')' (':' type=[Type])? SLD? (IsMany?='+' Times=INT?)?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Term:
	//	{RightTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'can' action=[Action] ','? ('when'
	//	condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)?
	//	| {DutyTerm} auto?='auto'? break?='break'? 'term' name=ID ':' party=[Party] 'must' action=[Action] ','? ('when'
	//	condition=Expression)? ('while' transferOperations+=TransferOperation+)? ('where' postCondition=Expression)? ('breach'
	//	breachOperations+=TransferOperation+)?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//TransferOperation:
	//	{Deposit} 'deposit' money=MoneyExpression
	//	| {Withdraw} 'withdraw' money=MoneyExpression
	//	| {Transfer} 'transfer' money=MoneyExpression 'to' account=Expression;
	public TransferOperationElements getTransferOperationAccess() {
		return pTransferOperation;
	}
	
	public ParserRule getTransferOperationRule() {
		return getTransferOperationAccess().getRule();
	}
	
	//MoneyExpression:
	//	{MoneyExpression} '$' /*('value'( name = ID)? relationOperator = RelationOperator)?*/ condition=Expression;
	public MoneyExpressionElements getMoneyExpressionAccess() {
		return pMoneyExpression;
	}
	
	public ParserRule getMoneyExpressionRule() {
		return getMoneyExpressionAccess().getRule();
	}
	
	//Expression:
	//	ConditionalExpression
	//	| => ImplyExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//DescriptiveExpression:
	//	plainText=PLAINTEXT;
	public DescriptiveExpressionElements getDescriptiveExpressionAccess() {
		return pDescriptiveExpression;
	}
	
	public ParserRule getDescriptiveExpressionRule() {
		return getDescriptiveExpressionAccess().getRule();
	}
	
	//CollectionSourceExpression:
	//	SlotRef (=> ({SelectExpression.source=current} 'where') condition=Expression)?;
	public CollectionSourceExpressionElements getCollectionSourceExpressionAccess() {
		return pCollectionSourceExpression;
	}
	
	public ParserRule getCollectionSourceExpressionRule() {
		return getCollectionSourceExpressionAccess().getRule();
	}
	
	//IteratorDeclExpression:
	//	name=ID;
	public IteratorDeclExpressionElements getIteratorDeclExpressionAccess() {
		return pIteratorDeclExpression;
	}
	
	public ParserRule getIteratorDeclExpressionRule() {
		return getIteratorDeclExpressionAccess().getRule();
	}
	
	//QuantifierExpression:
	//	qunatifier=Quantifier iterator=IteratorDeclExpression 'in' scope=CollectionSourceExpression 'such' 'that'
	//	condition=Expression;
	public QuantifierExpressionElements getQuantifierExpressionAccess() {
		return pQuantifierExpression;
	}
	
	public ParserRule getQuantifierExpressionRule() {
		return getQuantifierExpressionAccess().getRule();
	}
	
	//enum Quantifier:
	//	forAll='all' | forAll | exists='some' | exists;
	public QuantifierElements getQuantifierAccess() {
		return eQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}
	
	//ConditionalExpression:
	//	'if' condition=Expression 'then' thenBranch=Expression 'else' elseBranch=Expression;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ImplyExpression Expression:
	//	OrExpression (=> ({ImplyExpression.condition=current} 'implies') implied=Expression)?;
	public ImplyExpressionElements getImplyExpressionAccess() {
		return pImplyExpression;
	}
	
	public ParserRule getImplyExpressionRule() {
		return getImplyExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression (=> ({OrExpression.left=current} ('or' | '||')) right=OrExpression)?;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	AndExpressionChild (=> ({AndExpression.left=current} ('and' | '&&')) right=AndExpression)?;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndExpressionChild Expression:
	//	NotExpression
	//	| RelationalExpression;
	public AndExpressionChildElements getAndExpressionChildAccess() {
		return pAndExpressionChild;
	}
	
	public ParserRule getAndExpressionChildRule() {
		return getAndExpressionChildAccess().getRule();
	}
	
	//NotExpression:
	//	'not' inner=RelationalExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	ArithmeticExpression (=> ({RelationalExpression.left=current} operator=RelationOperator) right=ArithmeticExpression)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//enum RelationOperator returns RelationalOperator:
	//	equal='=' | equal='is' | less='<' | lessOrEqual='<=' | greater='>' | greaterOrEqual='>=' | notEqual='!=' |
	//	notEqual='<>' | notEqual='isn\'t';
	public RelationOperatorElements getRelationOperatorAccess() {
		return eRelationOperator;
	}
	
	public EnumRule getRelationOperatorRule() {
		return getRelationOperatorAccess().getRule();
	}
	
	//ArithmeticExpression Expression:
	//	AdditiveExpression;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
	//	right=MultiplicativeExpression)?;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//enum AdditiveOperator:
	//	add='+' | sub='-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return eAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	AtomExpression (=> ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator) right=AtomExpression)?;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//enum MultiplicativeOperator:
	//	mul='*' | div='/';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return eMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//AtomExpression Expression:
	//	=> ConstantExpression
	//	| TimePredicate
	//	| SlotRef
	//	| ThisExpression
	//	| QuantifierExpression
	//	| DescriptiveExpression
	//	| GlobalTimeQuery
	//	| TimeConstant
	//	| TimeQuery
	//	| '(' Expression ')';
	public AtomExpressionElements getAtomExpressionAccess() {
		return pAtomExpression;
	}
	
	public ParserRule getAtomExpressionRule() {
		return getAtomExpressionAccess().getRule();
	}
	
	//ThisExpression:
	//	{ThisExpression} ('this' ID? | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
	//	transitive=TransitiveOperator? next=SlotRef)?;
	public ThisExpressionElements getThisExpressionAccess() {
		return pThisExpression;
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//SlotRef:
	//	slot=[DataSlot] ('::' transitive=TransitiveOperator? next=SlotRef)?;
	public SlotRefElements getSlotRefAccess() {
		return pSlotRef;
	}
	
	public ParserRule getSlotRefRule() {
		return getSlotRefAccess().getRule();
	}
	
	//enum TransitiveOperator:
	//	transitiveEnclosure='^' | selfTransitiveEnclosure='*';
	public TransitiveOperatorElements getTransitiveOperatorAccess() {
		return eTransitiveOperator;
	}
	
	public EnumRule getTransitiveOperatorRule() {
		return getTransitiveOperatorAccess().getRule();
	}
	
	//ConstantExpression Expression:
	//	{IntegerConstant} value=Integer
	//	| {StringConstant} value=STRING
	//	| {Booleanconstant} value=Boolean
	//	| {FloatConstant} value=Float
	//	| {Valueconstant} value="value";
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//Float ecore::EFloat:
	//	('+' | '-')? (INT '.' INT? | '.' INT);
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//Integer ecore::EInt:
	//	'-'? INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//Boolean ecore::EBoolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//TimePredicate:
	//	SimpleTimePredicate
	//	| => BoundedTimePredicate
	//	| => PeriodicTimePredicate;
	public TimePredicateElements getTimePredicateAccess() {
		return pTimePredicate;
	}
	
	public ParserRule getTimePredicateRule() {
		return getTimePredicateAccess().getRule();
	}
	
	//SimpleTimePredicate TimePredicate:
	//	operator=TimePredicateOperator base=Expression;
	public SimpleTimePredicateElements getSimpleTimePredicateAccess() {
		return pSimpleTimePredicate;
	}
	
	public ParserRule getSimpleTimePredicateRule() {
		return getSimpleTimePredicateAccess().getRule();
	}
	
	////边界时间谓词
	//BoundedTimePredicate:
	//	closed?='within'? bound=TimeExpression operator=TimePredicateOperator base=Expression;
	public BoundedTimePredicateElements getBoundedTimePredicateAccess() {
		return pBoundedTimePredicate;
	}
	
	public ParserRule getBoundedTimePredicateRule() {
		return getBoundedTimePredicateAccess().getRule();
	}
	
	////周期时间谓词
	//PeriodicTimePredicate:
	//	'by' (operator=TimePredicateOperator periodDate=TimeConstant)? 'every' base=TimeConstant ('in' period=TimeExpression |
	//	'from' basefrom=Expression 'to' baseto=Expression)?;
	public PeriodicTimePredicateElements getPeriodicTimePredicateAccess() {
		return pPeriodicTimePredicate;
	}
	
	public ParserRule getPeriodicTimePredicateRule() {
		return getPeriodicTimePredicateAccess().getRule();
	}
	
	//enum TimePredicateOperator:
	//	before | after;
	public TimePredicateOperatorElements getTimePredicateOperatorAccess() {
		return eTimePredicateOperator;
	}
	
	public EnumRule getTimePredicateOperatorRule() {
		return getTimePredicateOperatorAccess().getRule();
	}
	
	//TimeExpression:
	//	=> TimeLine
	//	| TimeConstant
	//	| TimeQuery
	//	| TimeVarExpression
	//	| TimeThisExpression;
	public TimeExpressionElements getTimeExpressionAccess() {
		return pTimeExpression;
	}
	
	public ParserRule getTimeExpressionRule() {
		return getTimeExpressionAccess().getRule();
	}
	
	//TimeQuery:
	//	ActionEnforcedTimeQuery
	//	| TermValidTimeQuery
	//	| GlobalTimeQuery;
	public TimeQueryElements getTimeQueryAccess() {
		return pTimeQuery;
	}
	
	public ParserRule getTimeQueryRule() {
		return getTimeQueryAccess().getRule();
	}
	
	//ActionEnforcedTimeQuery:
	//	multiplicity=ActionMultiplicity? party=[Party] 'did' action=[Action];
	public ActionEnforcedTimeQueryElements getActionEnforcedTimeQueryAccess() {
		return pActionEnforcedTimeQuery;
	}
	
	public ParserRule getActionEnforcedTimeQueryRule() {
		return getActionEnforcedTimeQueryAccess().getRule();
	}
	
	//enum ActionMultiplicity returns PartyMemberMultiplicity:
	//	all | any | any="some" | any="one" | this | this="the";
	public ActionMultiplicityElements getActionMultiplicityAccess() {
		return eActionMultiplicity;
	}
	
	public EnumRule getActionMultiplicityRule() {
		return getActionMultiplicityAccess().getRule();
	}
	
	//TermValidTimeQuery:
	//	term=[Term] 'is' 'valid';
	public TermValidTimeQueryElements getTermValidTimeQueryAccess() {
		return pTermValidTimeQuery;
	}
	
	public ParserRule getTermValidTimeQueryRule() {
		return getTermValidTimeQueryAccess().getRule();
	}
	
	//GlobalTimeQuery:
	//	operator=TimeQueryOperator;
	public GlobalTimeQueryElements getGlobalTimeQueryAccess() {
		return pGlobalTimeQuery;
	}
	
	public ParserRule getGlobalTimeQueryRule() {
		return getGlobalTimeQueryAccess().getRule();
	}
	
	//TimeLine:
	//	base=TimeLineChild operator=TimeLineOperator deviation=TimeLineChild;
	public TimeLineElements getTimeLineAccess() {
		return pTimeLine;
	}
	
	public ParserRule getTimeLineRule() {
		return getTimeLineAccess().getRule();
	}
	
	//TimeLineChild TimeExpression:
	//	TimeConstant
	//	| TimeQuery;
	public TimeLineChildElements getTimeLineChildAccess() {
		return pTimeLineChild;
	}
	
	public ParserRule getTimeLineChildRule() {
		return getTimeLineChildAccess().getRule();
	}
	
	//enum TimeLineOperator:
	//	forward='+' | backward='-';
	public TimeLineOperatorElements getTimeLineOperatorAccess() {
		return eTimeLineOperator;
	}
	
	public EnumRule getTimeLineOperatorRule() {
		return getTimeLineOperatorAccess().getRule();
	}
	
	//enum TimeQueryOperator:
	//	now | contractStart='start' | contractEnd='end';
	public TimeQueryOperatorElements getTimeQueryOperatorAccess() {
		return eTimeQueryOperator;
	}
	
	public EnumRule getTimeQueryOperatorRule() {
		return getTimeQueryOperatorAccess().getRule();
	}
	
	//TimeConstant:
	//	{TimeConstant} (year=INT 'year')? (month=INT 'month')? (day=INT 'day')? (hour=INT 'hour')? (min=INT 'min')? (sec=INT
	//	'sec')? (date=INT 'th')?;
	public TimeConstantElements getTimeConstantAccess() {
		return pTimeConstant;
	}
	
	public ParserRule getTimeConstantRule() {
		return getTimeConstantAccess().getRule();
	}
	
	//TimeVarExpression:
	//	'@' slot=[DataSlot] ('::' next=SlotRef)?;
	public TimeVarExpressionElements getTimeVarExpressionAccess() {
		return pTimeVarExpression;
	}
	
	public ParserRule getTimeVarExpressionRule() {
		return getTimeVarExpressionAccess().getRule();
	}
	
	//TimeThisExpression ThisExpression:
	//	{ThisExpression} '@' ('this' ID | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') ('::'
	//	transitive=TransitiveOperator? next=SlotRef)?;
	public TimeThisExpressionElements getTimeThisExpressionAccess() {
		return pTimeThisExpression;
	}
	
	public ParserRule getTimeThisExpressionRule() {
		return getTimeThisExpressionAccess().getRule();
	}
	
	//terminal SLD:
	//	'i.e.,' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSLDRule() {
		return tSLD;
	}
	
	//terminal SL_COMMENT:
	//	('@@' | '//') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal PLAINTEXT:
	//	"#" ('\\' . | !('\\' | "#"))* "#";
	public TerminalRule getPLAINTEXTRule() {
		return tPLAINTEXT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
