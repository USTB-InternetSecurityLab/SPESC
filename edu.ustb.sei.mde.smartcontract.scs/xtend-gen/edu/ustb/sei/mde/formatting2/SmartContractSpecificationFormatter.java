/**
 * generated by Xtext 2.12.0
 */
package edu.ustb.sei.mde.formatting2;

import com.google.inject.Inject;
import edu.ustb.sei.mde.services.SmartContractSpecificationGrammarAccess;
import edu.ustb.sei.mde.smartContractSpecification.Asset;
import edu.ustb.sei.mde.smartContractSpecification.ComplexType;
import edu.ustb.sei.mde.smartContractSpecification.Contract;
import edu.ustb.sei.mde.smartContractSpecification.Field;
import edu.ustb.sei.mde.smartContractSpecification.Party;
import edu.ustb.sei.mde.smartContractSpecification.Term;
import edu.ustb.sei.mde.smartContractSpecification.Type;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class SmartContractSpecificationFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SmartContractSpecificationGrammarAccess _smartContractSpecificationGrammarAccess;
  
  protected void _format(final Contract contract, @Extension final IFormattableDocument document) {
    EList<Party> _parties = contract.getParties();
    for (final Party party : _parties) {
      document.<Party>format(party);
    }
    EList<Term> _terms = contract.getTerms();
    for (final Term term : _terms) {
      document.<Term>format(term);
    }
    EList<Type> _types = contract.getTypes();
    for (final Type type : _types) {
      document.<Type>format(type);
    }
    EList<Field> _fields = contract.getFields();
    for (final Field field : _fields) {
      document.<Field>format(field);
    }
    EList<Asset> _assets = contract.getAssets();
    for (final Asset asset : _assets) {
      document.<Asset>format(asset);
    }
  }
  
  protected void _format(final ComplexType complexType, @Extension final IFormattableDocument document) {
    EList<Field> _fields = complexType.getFields();
    for (final Field field : _fields) {
      document.<Field>format(field);
    }
  }
  
  protected void _format(final Asset asset, @Extension final IFormattableDocument document) {
    EList<Field> _fields = asset.getFields();
    for (final Field field : _fields) {
      document.<Field>format(field);
    }
  }
  
  public void format(final Object asset, final IFormattableDocument document) {
    if (asset instanceof Asset) {
      _format((Asset)asset, document);
      return;
    } else if (asset instanceof ComplexType) {
      _format((ComplexType)asset, document);
      return;
    } else if (asset instanceof XtextResource) {
      _format((XtextResource)asset, document);
      return;
    } else if (asset instanceof Contract) {
      _format((Contract)asset, document);
      return;
    } else if (asset instanceof EObject) {
      _format((EObject)asset, document);
      return;
    } else if (asset == null) {
      _format((Void)null, document);
      return;
    } else if (asset != null) {
      _format(asset, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(asset, document).toString());
    }
  }
}
