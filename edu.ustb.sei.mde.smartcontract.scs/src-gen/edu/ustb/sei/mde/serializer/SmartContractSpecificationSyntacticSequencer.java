/*
 * generated by Xtext 2.22.0
 */
package edu.ustb.sei.mde.serializer;

import com.google.inject.Inject;
import edu.ustb.sei.mde.services.SmartContractSpecificationGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SmartContractSpecificationSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SmartContractSpecificationGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Action_SLDTerminalRuleCall_5_q;
	protected AbstractElementAlias match_AndExpression_AmpersandAmpersandKeyword_1_0_0_1_1_or_AndKeyword_1_0_0_1_0;
	protected AbstractElementAlias match_AtomExpression_LeftParenthesisKeyword_9_0_a;
	protected AbstractElementAlias match_AtomExpression_LeftParenthesisKeyword_9_0_p;
	protected AbstractElementAlias match_Field_SLDTerminalRuleCall_4_q;
	protected AbstractElementAlias match_OrExpression_OrKeyword_1_0_0_1_0_or_VerticalLineVerticalLineKeyword_1_0_0_1_1;
	protected AbstractElementAlias match_Term_CommaKeyword_0_9_q;
	protected AbstractElementAlias match_Term_CommaKeyword_1_9_q;
	protected AbstractElementAlias match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or_ThisKeyword_1_0_0;
	protected AbstractElementAlias match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or___ThisKeyword_1_0_0_IDTerminalRuleCall_1_0_1_q__;
	protected AbstractElementAlias match_TimeThisExpression_HeKeyword_2_1_or_HerKeyword_2_4_or_HerselfKeyword_2_6_or_HimselfKeyword_2_5_or_HisKeyword_2_3_or_SheKeyword_2_2_or___ThisKeyword_2_0_0_IDTerminalRuleCall_2_0_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SmartContractSpecificationGrammarAccess) access;
		match_Action_SLDTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getActionAccess().getSLDTerminalRuleCall_5());
		match_AndExpression_AmpersandAmpersandKeyword_1_0_0_1_1_or_AndKeyword_1_0_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_0_0_1_1()), new TokenAlias(false, false, grammarAccess.getAndExpressionAccess().getAndKeyword_1_0_0_1_0()));
		match_AtomExpression_LeftParenthesisKeyword_9_0_a = new TokenAlias(true, true, grammarAccess.getAtomExpressionAccess().getLeftParenthesisKeyword_9_0());
		match_AtomExpression_LeftParenthesisKeyword_9_0_p = new TokenAlias(true, false, grammarAccess.getAtomExpressionAccess().getLeftParenthesisKeyword_9_0());
		match_Field_SLDTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getFieldAccess().getSLDTerminalRuleCall_4());
		match_OrExpression_OrKeyword_1_0_0_1_0_or_VerticalLineVerticalLineKeyword_1_0_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOrExpressionAccess().getOrKeyword_1_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0_0_1_1()));
		match_Term_CommaKeyword_0_9_q = new TokenAlias(false, true, grammarAccess.getTermAccess().getCommaKeyword_0_9());
		match_Term_CommaKeyword_1_9_q = new TokenAlias(false, true, grammarAccess.getTermAccess().getCommaKeyword_1_9());
		match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or_ThisKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHeKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHerKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHerselfKeyword_1_6()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHimselfKeyword_1_5()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHisKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getSheKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getThisKeyword_1_0_0()));
		match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or___ThisKeyword_1_0_0_IDTerminalRuleCall_1_0_1_q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getThisKeyword_1_0_0()), new TokenAlias(false, true, grammarAccess.getThisExpressionAccess().getIDTerminalRuleCall_1_0_1())), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHeKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHerKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHerselfKeyword_1_6()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHimselfKeyword_1_5()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getHisKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getThisExpressionAccess().getSheKeyword_1_2()));
		match_TimeThisExpression_HeKeyword_2_1_or_HerKeyword_2_4_or_HerselfKeyword_2_6_or_HimselfKeyword_2_5_or_HisKeyword_2_3_or_SheKeyword_2_2_or___ThisKeyword_2_0_0_IDTerminalRuleCall_2_0_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getThisKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getIDTerminalRuleCall_2_0_1())), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getHeKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getHerKeyword_2_4()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getHerselfKeyword_2_6()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getHimselfKeyword_2_5()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getHisKeyword_2_3()), new TokenAlias(false, false, grammarAccess.getTimeThisExpressionAccess().getSheKeyword_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSLDRule())
			return getSLDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal SLD :
	 *   'i.e.,' !('\n'|'\r')* ('\r'? '\n')?
	 * ;
	 */
	protected String getSLDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "i.e.,";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Action_SLDTerminalRuleCall_5_q.equals(syntax))
				emit_Action_SLDTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AndExpression_AmpersandAmpersandKeyword_1_0_0_1_1_or_AndKeyword_1_0_0_1_0.equals(syntax))
				emit_AndExpression_AmpersandAmpersandKeyword_1_0_0_1_1_or_AndKeyword_1_0_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomExpression_LeftParenthesisKeyword_9_0_a.equals(syntax))
				emit_AtomExpression_LeftParenthesisKeyword_9_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomExpression_LeftParenthesisKeyword_9_0_p.equals(syntax))
				emit_AtomExpression_LeftParenthesisKeyword_9_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Field_SLDTerminalRuleCall_4_q.equals(syntax))
				emit_Field_SLDTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OrExpression_OrKeyword_1_0_0_1_0_or_VerticalLineVerticalLineKeyword_1_0_0_1_1.equals(syntax))
				emit_OrExpression_OrKeyword_1_0_0_1_0_or_VerticalLineVerticalLineKeyword_1_0_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Term_CommaKeyword_0_9_q.equals(syntax))
				emit_Term_CommaKeyword_0_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Term_CommaKeyword_1_9_q.equals(syntax))
				emit_Term_CommaKeyword_1_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or_ThisKeyword_1_0_0.equals(syntax))
				emit_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or_ThisKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or___ThisKeyword_1_0_0_IDTerminalRuleCall_1_0_1_q__.equals(syntax))
				emit_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or___ThisKeyword_1_0_0_IDTerminalRuleCall_1_0_1_q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeThisExpression_HeKeyword_2_1_or_HerKeyword_2_4_or_HerselfKeyword_2_6_or_HimselfKeyword_2_5_or_HisKeyword_2_3_or_SheKeyword_2_2_or___ThisKeyword_2_0_0_IDTerminalRuleCall_2_0_1__.equals(syntax))
				emit_TimeThisExpression_HeKeyword_2_1_or_HerKeyword_2_4_or_HerselfKeyword_2_6_or_HimselfKeyword_2_5_or_HisKeyword_2_3_or_SheKeyword_2_2_or___ThisKeyword_2_0_0_IDTerminalRuleCall_2_0_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     SLD?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) (rule end)
	 *     name=ID '(' ')' (ambiguity) IsMany?='+'
	 *     parameters+=Field ')' (ambiguity) (rule end)
	 *     parameters+=Field ')' (ambiguity) IsMany?='+'
	 *     type=[Type|ID] (ambiguity) (rule end)
	 *     type=[Type|ID] (ambiguity) IsMany?='+'
	 */
	protected void emit_Action_SLDTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'and' | '&&'
	 *
	 * This ambiguous syntax occurs at:
	 *     {AndExpression.left=} (ambiguity) right=AndExpression
	 */
	protected void emit_AndExpression_AmpersandAmpersandKeyword_1_0_0_1_1_or_AndKeyword_1_0_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'by' 'every' base=TimeConstant
	 *     (rule start) (ambiguity) 'by' operator=TimePredicateOperator
	 *     (rule start) (ambiguity) 'if' condition=Expression
	 *     (rule start) (ambiguity) 'not' inner=RelationalExpression
	 *     (rule start) (ambiguity) ('this' | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') (rule start)
	 *     (rule start) (ambiguity) (('this' ID?) | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') '::' next=SlotRef
	 *     (rule start) (ambiguity) (('this' ID?) | 'he' | 'she' | 'his' | 'her' | 'himself' | 'herself') '::' transitive=TransitiveOperator
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) bound=TimeExpression
	 *     (rule start) (ambiguity) closed?='within'
	 *     (rule start) (ambiguity) date=INT
	 *     (rule start) (ambiguity) day=INT
	 *     (rule start) (ambiguity) hour=INT
	 *     (rule start) (ambiguity) min=INT
	 *     (rule start) (ambiguity) month=INT
	 *     (rule start) (ambiguity) multiplicity=ActionMultiplicity
	 *     (rule start) (ambiguity) operator=TimePredicateOperator
	 *     (rule start) (ambiguity) operator=TimeQueryOperator
	 *     (rule start) (ambiguity) party=[Party|ID]
	 *     (rule start) (ambiguity) plainText=PLAINTEXT
	 *     (rule start) (ambiguity) qunatifier=Quantifier
	 *     (rule start) (ambiguity) sec=INT
	 *     (rule start) (ambiguity) slot=[DataSlot|ID]
	 *     (rule start) (ambiguity) term=[Term|ID]
	 *     (rule start) (ambiguity) value='value'
	 *     (rule start) (ambiguity) value=Boolean
	 *     (rule start) (ambiguity) value=Float
	 *     (rule start) (ambiguity) value=Integer
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) year=INT
	 *     (rule start) (ambiguity) {AdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {ImplyExpression.condition=}
	 *     (rule start) (ambiguity) {MultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 */
	protected void emit_AtomExpression_LeftParenthesisKeyword_9_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'if' condition=Expression
	 *     (rule start) (ambiguity) 'not' inner=RelationalExpression
	 *     (rule start) (ambiguity) {AdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {ImplyExpression.condition=}
	 *     (rule start) (ambiguity) {MultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 */
	protected void emit_AtomExpression_LeftParenthesisKeyword_9_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SLD?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=[Type|ID] (ambiguity) (rule end)
	 */
	protected void emit_Field_SLDTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'or' | '||'
	 *
	 * This ambiguous syntax occurs at:
	 *     {OrExpression.left=} (ambiguity) right=OrExpression
	 */
	protected void emit_OrExpression_OrKeyword_1_0_0_1_0_or_VerticalLineVerticalLineKeyword_1_0_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=[Action|ID] (ambiguity) 'when' condition=Expression
	 *     action=[Action|ID] (ambiguity) 'where' postCondition=Expression
	 *     action=[Action|ID] (ambiguity) 'while' transferOperations+=TransferOperation
	 *     action=[Action|ID] (ambiguity) (rule end)
	 */
	protected void emit_Term_CommaKeyword_0_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=[Action|ID] (ambiguity) 'breach' breachOperations+=TransferOperation
	 *     action=[Action|ID] (ambiguity) 'when' condition=Expression
	 *     action=[Action|ID] (ambiguity) 'where' postCondition=Expression
	 *     action=[Action|ID] (ambiguity) 'while' transferOperations+=TransferOperation
	 *     action=[Action|ID] (ambiguity) (rule end)
	 */
	protected void emit_Term_CommaKeyword_1_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'this' | 
	  *         'he' | 
	  *         'she' | 
	  *         'his' | 
	  *         'her' | 
	  *         'himself' | 
	  *         'herself'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 */
	protected void emit_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or_ThisKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         ('this' ID?) | 
	  *         'he' | 
	  *         'she' | 
	  *         'his' | 
	  *         'her' | 
	  *         'himself' | 
	  *         'herself'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) '::' next=SlotRef
	 *     (rule start) '('* (ambiguity) '::' transitive=TransitiveOperator
	 *     (rule start) (ambiguity) '::' next=SlotRef
	 *     (rule start) (ambiguity) '::' transitive=TransitiveOperator
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ThisExpression_HeKeyword_1_1_or_HerKeyword_1_4_or_HerselfKeyword_1_6_or_HimselfKeyword_1_5_or_HisKeyword_1_3_or_SheKeyword_1_2_or___ThisKeyword_1_0_0_IDTerminalRuleCall_1_0_1_q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         ('this' ID) | 
	  *         'he' | 
	  *         'she' | 
	  *         'his' | 
	  *         'her' | 
	  *         'himself' | 
	  *         'herself'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '@' (ambiguity) '::' next=SlotRef
	 *     (rule start) '@' (ambiguity) '::' transitive=TransitiveOperator
	 *     (rule start) '@' (ambiguity) (rule start)
	 */
	protected void emit_TimeThisExpression_HeKeyword_2_1_or_HerKeyword_2_4_or_HerselfKeyword_2_6_or_HimselfKeyword_2_5_or_HisKeyword_2_3_or_SheKeyword_2_2_or___ThisKeyword_2_0_0_IDTerminalRuleCall_2_0_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
