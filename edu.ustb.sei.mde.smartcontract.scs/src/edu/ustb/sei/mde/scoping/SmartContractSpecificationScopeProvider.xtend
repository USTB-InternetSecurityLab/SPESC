/*
 * generated by Xtext 2.12.0
 */
package edu.ustb.sei.mde.scoping

import edu.ustb.sei.mde.smartContractSpecification.Action
import edu.ustb.sei.mde.smartContractSpecification.ActionEnforcedTimeQuery
import edu.ustb.sei.mde.smartContractSpecification.ComplexType
import edu.ustb.sei.mde.smartContractSpecification.Contract
import edu.ustb.sei.mde.smartContractSpecification.DataSlot
import edu.ustb.sei.mde.smartContractSpecification.Field
import edu.ustb.sei.mde.smartContractSpecification.InternalParty
import edu.ustb.sei.mde.smartContractSpecification.IteratorDeclExpression
import edu.ustb.sei.mde.smartContractSpecification.NamedElement
import edu.ustb.sei.mde.smartContractSpecification.Party
import edu.ustb.sei.mde.smartContractSpecification.QuantifierExpression
import edu.ustb.sei.mde.smartContractSpecification.SlotRef
import edu.ustb.sei.mde.smartContractSpecification.SmartContractSpecificationPackage
import edu.ustb.sei.mde.smartContractSpecification.Term
import edu.ustb.sei.mde.smartContractSpecification.ThisExpression
import edu.ustb.sei.mde.smartContractSpecification.Type
import edu.ustb.sei.mde.smartContractSpecification.TypeLib
import edu.ustb.sei.mde.smartContractSpecification.enumType
import java.util.ArrayList
import java.util.Collections
import java.util.List
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.impl.SimpleScope
import edu.ustb.sei.mde.smartContractSpecification.Asset


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SmartContractSpecificationScopeProvider extends AbstractSmartContractSpecificationScopeProvider {

	override getScope(EObject context, EReference reference) {
		if(reference.EType===SmartContractSpecificationPackage.Literals.ACTION) {
			val Party party = if(reference===SmartContractSpecificationPackage.Literals.TERM__ACTION) (context as Term).party else if(reference===SmartContractSpecificationPackage.Literals.ACTION_ENFORCED_TIME_QUERY__ACTION) (context as ActionEnforcedTimeQuery).party else null;
			if(party===null || party.eIsProxy) super.getScope(context, reference)
			else {
				val List<Action> list = getContract(context).parties.fold(new ArrayList, [r,t| r.addAll(t.actions);r]);
				val List<IEObjectDescription> desc = list.filter[a|a.eContainer===party].fold(new ArrayList,[r,t|r.add(EObjectDescription.create(t.name,t));r]);
				new SimpleScope(SimpleScope.NULLSCOPE, desc);
			}  
		} else if(reference===SmartContractSpecificationPackage.Literals.TYPED_ELEMENT__TYPE) {
			val List<Type> list = new ArrayList(getContract(context).types);
			list.addAll(getContract(context).parties);
			list.addAll(getContract(context).enumTypes);
			list.addAll(getContract(context).assets);
			val ResourceSet resSet = context.eResource.resourceSet;
			var uri=URI.createPlatformPluginURI("edu.ustb.sei.mde.smartcontract/model/TypeLib.xmi",false);
			val typeRes = resSet.getResource(uri,true);
			if(typeRes!==null) list.addAll((typeRes.contents.get(0) as TypeLib).types);
			val List<IEObjectDescription> desc = list.fold(new ArrayList,[r,t|r.add(EObjectDescription.create(t.name,t));r]);
			new SimpleScope(SimpleScope.NULLSCOPE, desc);
		} else if(reference===SmartContractSpecificationPackage.Literals.SLOT_REF__SLOT) {
			if(context.eContainer instanceof SlotRef) {
				val DataSlot slot = (context.eContainer as SlotRef).slot;
				
				val List<? extends NamedElement> list = 
				if(slot instanceof InternalParty) {
					(slot as InternalParty).fields
				} else if(slot instanceof Field) {
					if((slot as Field).type instanceof ComplexType) ((slot as Field).type as ComplexType).fields
					else if((slot as Field).type instanceof Asset) ((slot as Field).type as Asset).fields
					else if((slot as Field).type instanceof InternalParty) ((slot as Field).type as InternalParty).fields
					else Collections.emptyList
				} else if(slot instanceof IteratorDeclExpression) {
					val type = (slot as IteratorDeclExpression).getType;
					if(type===null) Collections.emptyList
					else if(type instanceof ComplexType) (type as ComplexType).fields
					else if(type instanceof Asset) (type as Asset).fields
					else if(type instanceof InternalParty) (type as InternalParty).fields
					else Collections.emptyList
				} else if(slot instanceof enumType){
					(slot as enumType).selections
				} else if(slot === null && context.eContainer instanceof ThisExpression){
					getContract(context).parties.filter[a|a===getTerm(context).party && a instanceof InternalParty].fold(new ArrayList,[r,t|r += (t as InternalParty).fields;r])
				} else Collections.emptyList;
				
				val List<IEObjectDescription> desc = list.fold(new ArrayList,[r,t|r.add(EObjectDescription.create(t.name,t));r]);
				new SimpleScope(SimpleScope.NULLSCOPE, desc);
			} else {
				// root case
				val List<IEObjectDescription> desc = new ArrayList;
				val Contract contract = getContract(context);
				contract.fields.fold(desc, [r,t| r.add(EObjectDescription.create(t.name,t));r]);
				contract.parties.filter[p | p instanceof InternalParty].fold(desc, [r,t| r.add(EObjectDescription.create(t.name,t));r]);
				
				val Term term = getTerm(context);
				if(term!==null) term.action.parameters.fold(desc, [r,t| r.add(EObjectDescription.create(t.name,t));r]);
				if(term!==null) term.transferOperations.fold(desc, [r,t| if(t.money.name!==null) r.add(EObjectDescription.create(t.money.name,t.money));r]);
				if(term!==null) term.breachOperations.fold(desc, [r,t| if(t.money.name!==null) r.add(EObjectDescription.create(t.money.name,t.money));r]);
				val iterators = collectIterators(context);
				if(iterators!==null) iterators.fold(desc,[r, i| r.add(EObjectDescription.create(i.name,i));r]);
				
				new SimpleScope(SimpleScope.NULLSCOPE, desc);				
			}
			
		} else super.getScope(context, reference)
	}
	
	def Term getTerm(EObject o) {
		if(o===null) null
		else if(o instanceof Term) o as Term
		else getTerm(o.eContainer);
	}
	
	def List<IteratorDeclExpression> collectIterators(EObject context) {
		if(context===null) return null;
		val current = if(context instanceof QuantifierExpression) context.iterator else null;
		val parents = collectIterators(context.eContainer);
		
		if(current!==null && parents!==null) {parents.add(current);parents}
		else if(current===null) parents
		else if(parents===null) {val col = new ArrayList; col.add(current);col}
	}
	
	
	def Contract getContract(EObject o) {
		if(o===null) null
		else if(o instanceof Contract) o
		else getContract(o.eContainer);
		
	}
	
}
